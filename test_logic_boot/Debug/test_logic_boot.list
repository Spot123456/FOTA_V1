
test_logic_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002484  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800264c  0800264c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800264c  0800264c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800264c  0800264c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002654  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          000000a4  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002891  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000daf  00000000  00000000  000228c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000490  00000000  00000000  00023678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003d8  00000000  00000000  00023b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000018e1  00000000  00000000  00023ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f78  00000000  00000000  000257c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006026  00000000  00000000  00028739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002e75f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010c0  00000000  00000000  0002e7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08002614 	.word	0x08002614

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08002614 	.word	0x08002614

080001e8 <DMB>:





void DMB(void) {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	__asm volatile ("dmb");
 80001ec:	f3bf 8f5f 	dmb	sy
	// Use "dmb" assembly instruction
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
	...

080001fc <Bootloader_Init>:
	__asm volatile("MSR msp, %0\n" : : "r" (topOfMainStack) );
}


void Bootloader_Init()
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af02      	add	r7, sp, #8

	RCC_voidEnablePerCLK(15, AHB1);		// enable flash interface
 8000202:	2100      	movs	r1, #0
 8000204:	200f      	movs	r0, #15
 8000206:	f001 ff45 	bl	8002094 <RCC_voidEnablePerCLK>
		RCC_voidEnablePerCLK(2, AHB1);		//	Enable port c
 800020a:	2100      	movs	r1, #0
 800020c:	2002      	movs	r0, #2
 800020e:	f001 ff41 	bl	8002094 <RCC_voidEnablePerCLK>
		RCC_voidEnablePerCLK(18,APB1 );		// enable Uart 3
 8000212:	2103      	movs	r1, #3
 8000214:	2012      	movs	r0, #18
 8000216:	f001 ff3d 	bl	8002094 <RCC_voidEnablePerCLK>

		// this is the problem dnfanfalknjflajf
		RCC_voidEnablePerCLK(1, AHB1); // port b
 800021a:	2100      	movs	r1, #0
 800021c:	2001      	movs	r0, #1
 800021e:	f001 ff39 	bl	8002094 <RCC_voidEnablePerCLK>
		RCC_voidEnablePerCLK(3, AHB1); // port d
 8000222:	2100      	movs	r1, #0
 8000224:	2003      	movs	r0, #3
 8000226:	f001 ff35 	bl	8002094 <RCC_voidEnablePerCLK>

		DIO_voidSetPinDirection(PORTB, pin11, AF, No_pull_up, Output_push_pull); // uart rx
 800022a:	2300      	movs	r3, #0
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2300      	movs	r3, #0
 8000230:	2202      	movs	r2, #2
 8000232:	210b      	movs	r1, #11
 8000234:	2001      	movs	r0, #1
 8000236:	f000 faf7 	bl	8000828 <DIO_voidSetPinDirection>
		AF_Select_pin_Fun(PORTB, pin11, AF_UART1_3);
 800023a:	2207      	movs	r2, #7
 800023c:	210b      	movs	r1, #11
 800023e:	2001      	movs	r0, #1
 8000240:	f001 fbea 	bl	8001a18 <AF_Select_pin_Fun>
		DIO_voidSetPinSpeed(PORTB, pin11,Very_high_speed );
 8000244:	2203      	movs	r2, #3
 8000246:	210b      	movs	r1, #11
 8000248:	2001      	movs	r0, #1
 800024a:	f001 f90b 	bl	8001464 <DIO_voidSetPinSpeed>

		DIO_voidSetPinDirection(PORTD, pin8, AF,No_pull_up, Output_push_pull); // uart tx
 800024e:	2300      	movs	r3, #0
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	2300      	movs	r3, #0
 8000254:	2202      	movs	r2, #2
 8000256:	2108      	movs	r1, #8
 8000258:	2003      	movs	r0, #3
 800025a:	f000 fae5 	bl	8000828 <DIO_voidSetPinDirection>
		AF_Select_pin_Fun(PORTD, pin8, AF_UART1_3);
 800025e:	2207      	movs	r2, #7
 8000260:	2108      	movs	r1, #8
 8000262:	2003      	movs	r0, #3
 8000264:	f001 fbd8 	bl	8001a18 <AF_Select_pin_Fun>
		DIO_voidSetPinSpeed(PORTD, pin8,Very_high_speed );
 8000268:	2203      	movs	r2, #3
 800026a:	2108      	movs	r1, #8
 800026c:	2003      	movs	r0, #3
 800026e:	f001 f8f9 	bl	8001464 <DIO_voidSetPinSpeed>

		DIO_voidSetPinDirection(PORTD, pin14,output,No_pull_up, Output_push_pull);
 8000272:	2300      	movs	r3, #0
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	2300      	movs	r3, #0
 8000278:	2201      	movs	r2, #1
 800027a:	210e      	movs	r1, #14
 800027c:	2003      	movs	r0, #3
 800027e:	f000 fad3 	bl	8000828 <DIO_voidSetPinDirection>
		DIO_voidSetPinSpeed(PORTD, pin14,Low_speed );
 8000282:	2200      	movs	r2, #0
 8000284:	210e      	movs	r1, #14
 8000286:	2003      	movs	r0, #3
 8000288:	f001 f8ec 	bl	8001464 <DIO_voidSetPinSpeed>

		DIO_voidSetPinDirection(PORTD, pin13,output,No_pull_up, Output_push_pull);
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	2300      	movs	r3, #0
 8000292:	2201      	movs	r2, #1
 8000294:	210d      	movs	r1, #13
 8000296:	2003      	movs	r0, #3
 8000298:	f000 fac6 	bl	8000828 <DIO_voidSetPinDirection>
		DIO_voidSetPinSpeed(PORTD, pin13,Low_speed );
 800029c:	2200      	movs	r2, #0
 800029e:	210d      	movs	r1, #13
 80002a0:	2003      	movs	r0, #3
 80002a2:	f001 f8df 	bl	8001464 <DIO_voidSetPinSpeed>

		DIO_voidSetPinDirection(PORTD, pin12,output,No_pull_up, Output_push_pull);
 80002a6:	2300      	movs	r3, #0
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2300      	movs	r3, #0
 80002ac:	2201      	movs	r2, #1
 80002ae:	210c      	movs	r1, #12
 80002b0:	2003      	movs	r0, #3
 80002b2:	f000 fab9 	bl	8000828 <DIO_voidSetPinDirection>
			DIO_voidSetPinSpeed(PORTD, pin12,Low_speed );
 80002b6:	2200      	movs	r2, #0
 80002b8:	210c      	movs	r1, #12
 80002ba:	2003      	movs	r0, #3
 80002bc:	f001 f8d2 	bl	8001464 <DIO_voidSetPinSpeed>

		NVIC_voidInit();
 80002c0:	f001 fe92 	bl	8001fe8 <NVIC_voidInit>
				UART3_voidInit(); // init uart 9600
 80002c4:	f002 f82e 	bl	8002324 <UART3_voidInit>

				NVIC_voidEnablePerInt(39); // enable uart3 interrupt
 80002c8:	2027      	movs	r0, #39	; 0x27
 80002ca:	f001 fe9b 	bl	8002004 <NVIC_voidEnablePerInt>
				UART3_u8EnterruptEnRX();
 80002ce:	f002 f8b9 	bl	8002444 <UART3_u8EnterruptEnRX>

			UART3_u8EnterruptCallBackRX(&RX_Fun);
 80002d2:	4803      	ldr	r0, [pc, #12]	; (80002e0 <Bootloader_Init+0xe4>)
 80002d4:	f002 f8de 	bl	8002494 <UART3_u8EnterruptCallBackRX>


}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	080003cd 	.word	0x080003cd

080002e4 <Bootloader_voidFlashRunnable>:

void Bootloader_voidFlashRunnable()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
	u8 local_state;
	switch (Global_bootloader_stateMachine)
 80002ea:	4b20      	ldr	r3, [pc, #128]	; (800036c <Bootloader_voidFlashRunnable+0x88>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b05      	cmp	r3, #5
 80002f0:	d836      	bhi.n	8000360 <Bootloader_voidFlashRunnable+0x7c>
 80002f2:	a201      	add	r2, pc, #4	; (adr r2, 80002f8 <Bootloader_voidFlashRunnable+0x14>)
 80002f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f8:	08000335 	.word	0x08000335
 80002fc:	08000311 	.word	0x08000311
 8000300:	08000361 	.word	0x08000361
 8000304:	0800034d 	.word	0x0800034d
 8000308:	08000353 	.word	0x08000353
 800030c:	08000359 	.word	0x08000359
	 * if true change the state to boot reqest and send to server (flash req)
	 * if not change to waiting state
	 */

		case BOOT_CHECKFORUPDATE:
			local_state=localBootloader_updateAvailable();
 8000310:	f000 f836 	bl	8000380 <localBootloader_updateAvailable>
 8000314:	4603      	mov	r3, r0
 8000316:	71fb      	strb	r3, [r7, #7]
			if(local_state==TRUE)
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2b80      	cmp	r3, #128	; 0x80
 800031c:	d106      	bne.n	800032c <Bootloader_voidFlashRunnable+0x48>
			{
				Global_bootloader_stateMachine = BOOT_RECEIVINGHEX;
 800031e:	4b13      	ldr	r3, [pc, #76]	; (800036c <Bootloader_voidFlashRunnable+0x88>)
 8000320:	2203      	movs	r2, #3
 8000322:	701a      	strb	r2, [r3, #0]
				Global_FrameRequestFlag=1;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <Bootloader_voidFlashRunnable+0x8c>)
 8000326:	2201      	movs	r2, #1
 8000328:	701a      	strb	r2, [r3, #0]
			else
			{
				Global_bootloader_stateMachine= BOOT_WAITING;
			}

		break;
 800032a:	e01a      	b.n	8000362 <Bootloader_voidFlashRunnable+0x7e>
				Global_bootloader_stateMachine= BOOT_WAITING;
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <Bootloader_voidFlashRunnable+0x88>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
		break;
 8000332:	e016      	b.n	8000362 <Bootloader_voidFlashRunnable+0x7e>

		/* if time out global state machine jump to app
		 * else change to receiving hex
		 */
		case BOOT_WAITING:
			STK_voidInit();
 8000334:	f001 ff78 	bl	8002228 <STK_voidInit>
			STK_voidSetIntervalPeriodic(TIMEOUTDEALY, Bootloader_StateMachienChangeToApp);
 8000338:	490e      	ldr	r1, [pc, #56]	; (8000374 <Bootloader_voidFlashRunnable+0x90>)
 800033a:	480f      	ldr	r0, [pc, #60]	; (8000378 <Bootloader_voidFlashRunnable+0x94>)
 800033c:	f001 ff80 	bl	8002240 <STK_voidSetIntervalPeriodic>
			Bootloader_HandelFlames();
 8000340:	f000 f914 	bl	800056c <Bootloader_HandelFlames>
			UART3_u8SendStringBusyW8("wait");
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <Bootloader_voidFlashRunnable+0x98>)
 8000346:	f002 f845 	bl	80023d4 <UART3_u8SendStringBusyW8>
		break;
 800034a:	e00a      	b.n	8000362 <Bootloader_voidFlashRunnable+0x7e>

		case BOOT_RECEIVINGHEX:
			Bootloader_voidfReciveFlash();
 800034c:	f000 f88c 	bl	8000468 <Bootloader_voidfReciveFlash>
			break;
 8000350:	e007      	b.n	8000362 <Bootloader_voidFlashRunnable+0x7e>

		case BOOT_JUMPTOTHEMAINAPP:
			Bootloader_Jump_To_Application();
 8000352:	f000 f8df 	bl	8000514 <Bootloader_Jump_To_Application>
			break;
 8000356:	e004      	b.n	8000362 <Bootloader_voidFlashRunnable+0x7e>
		case BOOTERROR:
				// report error  and go Waiting
			Global_bootloader_stateMachine= BOOT_WAITING;
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <Bootloader_voidFlashRunnable+0x88>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
				break;
 800035e:	e000      	b.n	8000362 <Bootloader_voidFlashRunnable+0x7e>
			default:
				break;
 8000360:	bf00      	nop

	}
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000020 	.word	0x20000020
 8000370:	20000021 	.word	0x20000021
 8000374:	080003b5 	.word	0x080003b5
 8000378:	00989680 	.word	0x00989680
 800037c:	0800262c 	.word	0x0800262c

08000380 <localBootloader_updateAvailable>:
/* using to make marker in memory (AA55)
   if the address location has value AA55 after SW reset
   clear and move to boot loader
*/
static Bool_t localBootloader_updateAvailable(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
	u8 local_state= OK;
 8000386:	2300      	movs	r3, #0
 8000388:	71fb      	strb	r3, [r7, #7]
	u16* prt_FlashMarker = (u16*) BOOT_DDRESSMARK;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <localBootloader_updateAvailable+0x30>)
 800038c:	603b      	str	r3, [r7, #0]
	if(*prt_FlashMarker==BOOT_FLASHMARK)
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000396:	4293      	cmp	r3, r2
 8000398:	d103      	bne.n	80003a2 <localBootloader_updateAvailable+0x22>
	{
		// erase this location
		FMI_vSectorErase(2);
 800039a:	2002      	movs	r0, #2
 800039c:	f000 f98e 	bl	80006bc <FMI_vSectorErase>
 80003a0:	e001      	b.n	80003a6 <localBootloader_updateAvailable+0x26>
	}
	else
	{
		local_state= FALSE;
 80003a2:	2355      	movs	r3, #85	; 0x55
 80003a4:	71fb      	strb	r3, [r7, #7]
	}
	return local_state;
 80003a6:	79fb      	ldrb	r3, [r7, #7]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	08008000 	.word	0x08008000

080003b4 <Bootloader_StateMachienChangeToApp>:


// use to cahnge global machine into jump to application
static void Bootloader_StateMachienChangeToApp()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	STK_voidStopInterval();
 80003b8:	f001 ff68 	bl	800228c <STK_voidStopInterval>
	Global_bootloader_stateMachine= BOOT_JUMPTOTHEMAINAPP;
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <Bootloader_StateMachienChangeToApp+0x14>)
 80003be:	2204      	movs	r2, #4
 80003c0:	701a      	strb	r2, [r3, #0]

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000020 	.word	0x20000020

080003cc <RX_Fun>:

// set callback for uart 3 receive record and change global flag of receiving ( dataReceiv )
void RX_Fun (void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	RX_Flag_counter++;
 80003d0:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <RX_Fun+0x84>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	3301      	adds	r3, #1
 80003d6:	4a1e      	ldr	r2, [pc, #120]	; (8000450 <RX_Fun+0x84>)
 80003d8:	6013      	str	r3, [r2, #0]
	static u8 receive_data;
	UART3_u8RecieveByte(&receive_data);
 80003da:	481e      	ldr	r0, [pc, #120]	; (8000454 <RX_Fun+0x88>)
 80003dc:	f002 f818 	bl	8002410 <UART3_u8RecieveByte>

	//UART3_u8SendByteBusyw8(receive_data);

	if(receive_data !=':' && receive_data!= '#')
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <RX_Fun+0x88>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b3a      	cmp	r3, #58	; 0x3a
 80003e6:	d010      	beq.n	800040a <RX_Fun+0x3e>
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <RX_Fun+0x88>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b23      	cmp	r3, #35	; 0x23
 80003ee:	d00c      	beq.n	800040a <RX_Fun+0x3e>
	//if(receive_data!= '#')
	{
		Global_u8ArrayReceiveDirectUart[Global_u8stackPointerArrayReceive]=receive_data;
 80003f0:	4b19      	ldr	r3, [pc, #100]	; (8000458 <RX_Fun+0x8c>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <RX_Fun+0x88>)
 80003f8:	7819      	ldrb	r1, [r3, #0]
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <RX_Fun+0x90>)
 80003fc:	5499      	strb	r1, [r3, r2]
		Global_u8stackPointerArrayReceive++;
 80003fe:	4b16      	ldr	r3, [pc, #88]	; (8000458 <RX_Fun+0x8c>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4b14      	ldr	r3, [pc, #80]	; (8000458 <RX_Fun+0x8c>)
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(receive_data=='#')
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <RX_Fun+0x88>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b23      	cmp	r3, #35	; 0x23
 8000410:	d10b      	bne.n	800042a <RX_Fun+0x5e>
	{
		Global_u8ArrayReceiveDirectUart[Global_u8stackPointerArrayReceive]=0;
 8000412:	4b11      	ldr	r3, [pc, #68]	; (8000458 <RX_Fun+0x8c>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	461a      	mov	r2, r3
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <RX_Fun+0x90>)
 800041a:	2100      	movs	r1, #0
 800041c:	5499      	strb	r1, [r3, r2]
		Global_u8stackPointerArrayReceive=0;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <RX_Fun+0x8c>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
		//UART3_u8SendStringBusyW8("hamada");
		dataReceiv=1;
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <RX_Fun+0x94>)
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
	}
	u8 static led=1;
	DIO_voidSetPinValue(PORTD, pin12,led);
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <RX_Fun+0x98>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	461a      	mov	r2, r3
 8000430:	210c      	movs	r1, #12
 8000432:	2003      	movs	r0, #3
 8000434:	f001 fa68 	bl	8001908 <DIO_voidSetPinValue>
	led=!led;
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <RX_Fun+0x98>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	bf0c      	ite	eq
 8000440:	2301      	moveq	r3, #1
 8000442:	2300      	movne	r3, #0
 8000444:	b2db      	uxtb	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <RX_Fun+0x98>)
 800044a:	701a      	strb	r2, [r3, #0]
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000024 	.word	0x20000024
 8000454:	2000008e 	.word	0x2000008e
 8000458:	2000008c 	.word	0x2000008c
 800045c:	20000028 	.word	0x20000028
 8000460:	2000008d 	.word	0x2000008d
 8000464:	20000001 	.word	0x20000001

08000468 <Bootloader_voidfReciveFlash>:


void Bootloader_voidfReciveFlash()
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08c      	sub	sp, #48	; 0x30
 800046c:	af02      	add	r7, sp, #8
//	u8 size , record_type ,data,address_hex,checksum;
	if(dataReceiv == 1)
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <Bootloader_voidfReciveFlash+0x94>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d13b      	bne.n	80004ee <Bootloader_voidfReciveFlash+0x86>
	{
	//	RedesignHex1Bytes((u8*)Global_u8ArrayReceiveDirectUart,(u8*) RedesignHexdata, HEXFileSize); ///////
		u32 address_hex=0;
 8000476:	2300      	movs	r3, #0
 8000478:	627b      	str	r3, [r7, #36]	; 0x24
		u8 size=0 , record_type=0,checksum=0;
 800047a:	2300      	movs	r3, #0
 800047c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000480:	2300      	movs	r3, #0
 8000482:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000486:	2300      	movs	r3, #0
 8000488:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		u16 data[16]={0};
 800048c:	463b      	mov	r3, r7
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f002 f8b6 	bl	8002604 <memset>

		//Parser_ParseData(&Global_u8ArrayReceiveDirectUart);
		HEX_voidParseFrame1((u8*) Global_u8ArrayReceiveDirectUart,&size,(u32*)address_hex,&record_type,(u16*)data,&checksum);
 8000498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800049a:	f107 0022 	add.w	r0, r7, #34	; 0x22
 800049e:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80004a2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	463b      	mov	r3, r7
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	4603      	mov	r3, r0
 80004ae:	4814      	ldr	r0, [pc, #80]	; (8000500 <Bootloader_voidfReciveFlash+0x98>)
 80004b0:	f001 fbbb 	bl	8001c2a <HEX_voidParseFrame1>
		if(record_type==HEX_DATARECORDER)
 80004b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d103      	bne.n	80004c4 <Bootloader_voidfReciveFlash+0x5c>
		{
			UART3_u8SendStringBusyW8("OK");
 80004bc:	4811      	ldr	r0, [pc, #68]	; (8000504 <Bootloader_voidfReciveFlash+0x9c>)
 80004be:	f001 ff89 	bl	80023d4 <UART3_u8SendStringBusyW8>
 80004c2:	e014      	b.n	80004ee <Bootloader_voidfReciveFlash+0x86>

		}
		else if(record_type==HEX_ENDOFRECORD)
 80004c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d110      	bne.n	80004ee <Bootloader_voidfReciveFlash+0x86>
		{
			UART3_u8SendStringBusyW8("\n");
 80004cc:	480e      	ldr	r0, [pc, #56]	; (8000508 <Bootloader_voidfReciveFlash+0xa0>)
 80004ce:	f001 ff81 	bl	80023d4 <UART3_u8SendStringBusyW8>
			UART3_u8SendStringBusyW8("END");
 80004d2:	480e      	ldr	r0, [pc, #56]	; (800050c <Bootloader_voidfReciveFlash+0xa4>)
 80004d4:	f001 ff7e 	bl	80023d4 <UART3_u8SendStringBusyW8>
			UART3_u8SendStringBusyW8("\n");
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <Bootloader_voidfReciveFlash+0xa0>)
 80004da:	f001 ff7b 	bl	80023d4 <UART3_u8SendStringBusyW8>
			UART3_u8SendStringBusyW8("OK");
 80004de:	4809      	ldr	r0, [pc, #36]	; (8000504 <Bootloader_voidfReciveFlash+0x9c>)
 80004e0:	f001 ff78 	bl	80023d4 <UART3_u8SendStringBusyW8>
			STK_voidStopInterval();
 80004e4:	f001 fed2 	bl	800228c <STK_voidStopInterval>
			Global_bootloader_stateMachine=BOOT_JUMPTOTHEMAINAPP;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <Bootloader_voidfReciveFlash+0xa8>)
 80004ea:	2204      	movs	r2, #4
 80004ec:	701a      	strb	r2, [r3, #0]



	}
	//UART3_u8SendStringBusyW8("OK");
	dataReceiv=0;
 80004ee:	4b03      	ldr	r3, [pc, #12]	; (80004fc <Bootloader_voidfReciveFlash+0x94>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
}
 80004f4:	bf00      	nop
 80004f6:	3728      	adds	r7, #40	; 0x28
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	2000008d 	.word	0x2000008d
 8000500:	20000028 	.word	0x20000028
 8000504:	08002634 	.word	0x08002634
 8000508:	08002638 	.word	0x08002638
 800050c:	0800263c 	.word	0x0800263c
 8000510:	20000020 	.word	0x20000020

08000514 <Bootloader_Jump_To_Application>:

void Bootloader_Jump_To_Application()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	/* update vector table to application (main application) */
	#ifndef SCB_VTOR
	#define SCB_VTOR	*(volatile u32*)(0xE000ED00+0x08)
	#endif
	// disable all interrupt
	UART3_u8EnterruptDsRX();
 800051a:	f001 ffa7 	bl	800246c <UART3_u8EnterruptDsRX>
	// Deinitialize peripherals
		RCC_voidDisablePerCLK(APB1,18);
 800051e:	2112      	movs	r1, #18
 8000520:	2003      	movs	r0, #3
 8000522:	f001 fe21 	bl	8002168 <RCC_voidDisablePerCLK>
		RCC_voidDisablePerCLK(1, AHB1); // port b
 8000526:	2100      	movs	r1, #0
 8000528:	2001      	movs	r0, #1
 800052a:	f001 fe1d 	bl	8002168 <RCC_voidDisablePerCLK>
		RCC_voidDisablePerCLK(3, AHB1); // port d
 800052e:	2100      	movs	r1, #0
 8000530:	2003      	movs	r0, #3
 8000532:	f001 fe19 	bl	8002168 <RCC_voidDisablePerCLK>

		// Set the MSP value
			DMB();
 8000536:	f7ff fe57 	bl	80001e8 <DMB>
			SCB_VTOR = FLASH_RESET_HANDLER;
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <Bootloader_Jump_To_Application+0x50>)
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <Bootloader_Jump_To_Application+0x54>)
 800053e:	601a      	str	r2, [r3, #0]
			DMB();
 8000540:	f7ff fe52 	bl	80001e8 <DMB>
	//set MSP
			u32* address=(u32*)(FLASH_RESET_HANDLER);
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <Bootloader_Jump_To_Application+0x54>)
 8000546:	607b      	str	r3, [r7, #4]
			u32 instruction = * address;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	603b      	str	r3, [r7, #0]
			if(instruction!=0xffffffff) // check if the address not empty
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000554:	d001      	beq.n	800055a <Bootloader_Jump_To_Application+0x46>
			{
				((void(*)(void))instruction)(); // jump to app
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	4798      	blx	r3
			}
			else
			{
				// error handler
			}
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	e000ed08 	.word	0xe000ed08
 8000568:	08004004 	.word	0x08004004

0800056c <Bootloader_HandelFlames>:



void Bootloader_HandelFlames(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	u16 local_u16DataCheckOverFrame = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	80fb      	strh	r3, [r7, #6]
	u8 localArray_u8temparr[2] = { 0 };
 8000576:	2300      	movs	r3, #0
 8000578:	80bb      	strh	r3, [r7, #4]
// check on frist 2bytes for Stages data
	if (Global_u8stackPointerArrayReceive > 1)
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <Bootloader_HandelFlames+0x78>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d913      	bls.n	80005aa <Bootloader_HandelFlames+0x3e>
	{
		RedesignHex1Bytes((u8*) Global_u8ArrayReceiveDirectUart,
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2202      	movs	r2, #2
 8000586:	4619      	mov	r1, r3
 8000588:	4817      	ldr	r0, [pc, #92]	; (80005e8 <Bootloader_HandelFlames+0x7c>)
 800058a:	f001 fc85 	bl	8001e98 <RedesignHex1Bytes>
				localArray_u8temparr, 2);
		local_u16DataCheckOverFrame = ((u16) localArray_u8temparr[0] << 8)
 800058e:	793b      	ldrb	r3, [r7, #4]
 8000590:	021b      	lsls	r3, r3, #8
				| localArray_u8temparr[1];
 8000592:	b21a      	sxth	r2, r3
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	b21b      	sxth	r3, r3
 8000598:	4313      	orrs	r3, r2
 800059a:	b21b      	sxth	r3, r3
		local_u16DataCheckOverFrame = ((u16) localArray_u8temparr[0] << 8)
 800059c:	80fb      	strh	r3, [r7, #6]
		Global_u8stackPointerArrayReceive = 0;
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <Bootloader_HandelFlames+0x78>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
		*(u16*) Global_u8ArrayReceiveDirectUart = 0;
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <Bootloader_HandelFlames+0x7c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	801a      	strh	r2, [r3, #0]
	{
		//do nothing
	}

// switch on cases .. flash sequence .. update sequances ..
	switch (local_u16DataCheckOverFrame)
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d112      	bne.n	80005da <Bootloader_HandelFlames+0x6e>
	{

	case BOOT_FRAMECASE_FLASHING:
		//STK_u8StopTimer();
		STK_voidStopInterval();
 80005b4:	f001 fe6a 	bl	800228c <STK_voidStopInterval>
		if(flash_lock==1)
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <Bootloader_HandelFlames+0x80>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d105      	bne.n	80005cc <Bootloader_HandelFlames+0x60>
				{
					FMI_vSectorErase(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 f87b 	bl	80006bc <FMI_vSectorErase>
					flash_lock=0;
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <Bootloader_HandelFlames+0x80>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
				else
				{
					// do nothing
				}
		//send for server for data .
		UART3_u8SendStringBusyW8("ACKFLASH");
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <Bootloader_HandelFlames+0x84>)
 80005ce:	f001 ff01 	bl	80023d4 <UART3_u8SendStringBusyW8>
		Global_bootloader_stateMachine = BOOT_RECEIVINGHEX;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <Bootloader_HandelFlames+0x88>)
 80005d4:	2203      	movs	r2, #3
 80005d6:	701a      	strb	r2, [r3, #0]
		break;
 80005d8:	e000      	b.n	80005dc <Bootloader_HandelFlames+0x70>
	default:
		break;
 80005da:	bf00      	nop
	}

}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	20000028 	.word	0x20000028
 80005ec:	20000000 	.word	0x20000000
 80005f0:	08002640 	.word	0x08002640
 80005f4:	20000020 	.word	0x20000020

080005f8 <DMA2_Stream0_IRQHandler>:
}



void	DMA2_Stream0_IRQHandler()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	if (stream_x==0&&SDMA2_call_back!=NULL)
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <DMA2_Stream0_IRQHandler+0x24>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d109      	bne.n	8000618 <DMA2_Stream0_IRQHandler+0x20>
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <DMA2_Stream0_IRQHandler+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d005      	beq.n	8000618 <DMA2_Stream0_IRQHandler+0x20>
	{
		SDMA2_call_back();
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <DMA2_Stream0_IRQHandler+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4798      	blx	r3
		state=free;
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <DMA2_Stream0_IRQHandler+0x2c>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// error handler
	}
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000008f 	.word	0x2000008f
 8000620:	20000090 	.word	0x20000090
 8000624:	20000094 	.word	0x20000094

08000628 <DMA2_Stream1_IRQHandler>:

void	DMA2_Stream1_IRQHandler()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if (stream_x==1&&SDMA2_call_back!=NULL)
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <DMA2_Stream1_IRQHandler+0x24>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d109      	bne.n	8000648 <DMA2_Stream1_IRQHandler+0x20>
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <DMA2_Stream1_IRQHandler+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <DMA2_Stream1_IRQHandler+0x20>
	{
		SDMA2_call_back();
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <DMA2_Stream1_IRQHandler+0x28>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4798      	blx	r3
		state=free;
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <DMA2_Stream1_IRQHandler+0x2c>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// error handler
	}
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000008f 	.word	0x2000008f
 8000650:	20000090 	.word	0x20000090
 8000654:	20000094 	.word	0x20000094

08000658 <DMA2_Stream2_IRQHandler>:

void	DMA2_Stream2_IRQHandler()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	if (stream_x==2&&SDMA2_call_back!=NULL)
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <DMA2_Stream2_IRQHandler+0x24>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d109      	bne.n	8000678 <DMA2_Stream2_IRQHandler+0x20>
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <DMA2_Stream2_IRQHandler+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d005      	beq.n	8000678 <DMA2_Stream2_IRQHandler+0x20>
	{
		SDMA2_call_back();
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <DMA2_Stream2_IRQHandler+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4798      	blx	r3
		state=free;
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <DMA2_Stream2_IRQHandler+0x2c>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// error handler
	}
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000008f 	.word	0x2000008f
 8000680:	20000090 	.word	0x20000090
 8000684:	20000094 	.word	0x20000094

08000688 <_delay_ms>:

#include "Delay.h"


void	_delay_ms(u32 ticks)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	u32 i;
	for( i = 0; i < (ticks * 500) ; i++)
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	e003      	b.n	800069e <_delay_ms+0x16>
	{
		asm("NOP");
 8000696:	bf00      	nop
	for( i = 0; i < (ticks * 500) ; i++)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d3f3      	bcc.n	8000696 <_delay_ms+0xe>
	}
}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <FMI_vSectorErase>:
		FMI_vSectorErase(i);
	}
}

void FMI_vSectorErase(u8 A_u8SectorNo)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	/* 1- Wait if Flash is Busy (BSY) */
	while(GET_Bit(FMI_Reg->SR, 16) == 1){}
 80006c6:	bf00      	nop
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <FMI_vSectorErase+0x9c>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	0c1b      	lsrs	r3, r3, #16
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d0f8      	beq.n	80006c8 <FMI_vSectorErase+0xc>
	/* 2- Unlock Flash Register using KEYR */
	if(GET_Bit(FMI_Reg->CR, 31) == 1)
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <FMI_vSectorErase+0x9c>)
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	0fdb      	lsrs	r3, r3, #31
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d105      	bne.n	80006f0 <FMI_vSectorErase+0x34>
	{
		FMI_Reg->KEYR = FMI_KEY1 ;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <FMI_vSectorErase+0x9c>)
 80006e6:	4a1d      	ldr	r2, [pc, #116]	; (800075c <FMI_vSectorErase+0xa0>)
 80006e8:	605a      	str	r2, [r3, #4]
		FMI_Reg->KEYR = FMI_KEY2 ;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <FMI_vSectorErase+0x9c>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <FMI_vSectorErase+0xa4>)
 80006ee:	605a      	str	r2, [r3, #4]
	}

	/* 3- select Sector Number to erase */
	FMI_Reg->CR &=~((u32)(0b1111<<3)); // masking to clear
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <FMI_vSectorErase+0x9c>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4a18      	ldr	r2, [pc, #96]	; (8000758 <FMI_vSectorErase+0x9c>)
 80006f6:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 80006fa:	6113      	str	r3, [r2, #16]
	FMI_Reg->CR |= (A_u8SectorNo <<3);
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <FMI_vSectorErase+0x9c>)
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	79fa      	ldrb	r2, [r7, #7]
 8000702:	00d2      	lsls	r2, r2, #3
 8000704:	4611      	mov	r1, r2
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <FMI_vSectorErase+0x9c>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6113      	str	r3, [r2, #16]

	/* 4- Select Erase operation */
	SET_Bit(FMI_Reg->CR, 1);
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <FMI_vSectorErase+0x9c>)
 800070e:	691b      	ldr	r3, [r3, #16]
 8000710:	4a11      	ldr	r2, [pc, #68]	; (8000758 <FMI_vSectorErase+0x9c>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	6113      	str	r3, [r2, #16]
	/* 5- Start erase operation  */
	SET_Bit(FMI_Reg->CR, 16);
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <FMI_vSectorErase+0x9c>)
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <FMI_vSectorErase+0x9c>)
 800071e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000722:	6113      	str	r3, [r2, #16]
	/* 6- wait for Busy Flag    */
	while(GET_Bit(FMI_Reg->SR, 16) == 1){}
 8000724:	bf00      	nop
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <FMI_vSectorErase+0x9c>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	0c1b      	lsrs	r3, r3, #16
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	2b01      	cmp	r3, #1
 8000732:	d0f8      	beq.n	8000726 <FMI_vSectorErase+0x6a>
	/* 7- Clear EOP flag   */
	SET_Bit(FMI_Reg->SR, 0);
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <FMI_vSectorErase+0x9c>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	4a07      	ldr	r2, [pc, #28]	; (8000758 <FMI_vSectorErase+0x9c>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	60d3      	str	r3, [r2, #12]

	/* 8- DeSelect Erase Operation (reverse of step 4) */
	CLR_Bit(FMI_Reg->CR, 1); // end the operation that open
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <FMI_vSectorErase+0x9c>)
 8000742:	691b      	ldr	r3, [r3, #16]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <FMI_vSectorErase+0x9c>)
 8000746:	f023 0302 	bic.w	r3, r3, #2
 800074a:	6113      	str	r3, [r2, #16]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40023c00 	.word	0x40023c00
 800075c:	45670123 	.word	0x45670123
 8000760:	cdef89ab 	.word	0xcdef89ab

08000764 <FMI_vFlashWrite>:

void FMI_vFlashWrite(u32 A_u32Address,
		             u16* A_pu16Data,
					 u16  A_u16Length)
{
 8000764:	b480      	push	{r7}
 8000766:	b087      	sub	sp, #28
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	4613      	mov	r3, r2
 8000770:	80fb      	strh	r3, [r7, #6]
	/* 1- Wait if Flash is Busy (BSY) */
	while(GET_Bit(FMI_Reg->SR, 16) == 1){}
 8000772:	bf00      	nop
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <FMI_vFlashWrite+0xb8>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0c1b      	lsrs	r3, r3, #16
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	2b01      	cmp	r3, #1
 8000780:	d0f8      	beq.n	8000774 <FMI_vFlashWrite+0x10>
	/* 2- Unlock Flash Register using KEYR */
	if(GET_Bit(FMI_Reg->CR, 31) == 1)
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <FMI_vFlashWrite+0xb8>)
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	0fdb      	lsrs	r3, r3, #31
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	2b01      	cmp	r3, #1
 800078e:	d105      	bne.n	800079c <FMI_vFlashWrite+0x38>
	{
		FMI_Reg->KEYR = FMI_KEY1 ;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <FMI_vFlashWrite+0xb8>)
 8000792:	4a23      	ldr	r2, [pc, #140]	; (8000820 <FMI_vFlashWrite+0xbc>)
 8000794:	605a      	str	r2, [r3, #4]
		FMI_Reg->KEYR = FMI_KEY2 ;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <FMI_vFlashWrite+0xb8>)
 8000798:	4a22      	ldr	r2, [pc, #136]	; (8000824 <FMI_vFlashWrite+0xc0>)
 800079a:	605a      	str	r2, [r3, #4]
	}

	/* 3- select element size (PSIZE)  */
	FMI_Reg->CR &=~((u32)(0b11<<8)) ;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <FMI_vFlashWrite+0xb8>)
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <FMI_vFlashWrite+0xb8>)
 80007a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007a6:	6113      	str	r3, [r2, #16]
	FMI_Reg->CR |= (0b01<<8);
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <FMI_vFlashWrite+0xb8>)
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <FMI_vFlashWrite+0xb8>)
 80007ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b2:	6113      	str	r3, [r2, #16]

	/* 4- Activate Programming Mode (PG bit) */
	SET_Bit(FMI_Reg->CR, 0);
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <FMI_vFlashWrite+0xb8>)
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	4a18      	ldr	r2, [pc, #96]	; (800081c <FMI_vFlashWrite+0xb8>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6113      	str	r3, [r2, #16]

	/* 5- Write Data Array on Flash address */
	for(u16 i=0; i<A_u16Length; i++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	82fb      	strh	r3, [r7, #22]
 80007c4:	e01a      	b.n	80007fc <FMI_vFlashWrite+0x98>
	{
		*((volatile u16*)A_u32Address) = A_pu16Data[i];
 80007c6:	8afb      	ldrh	r3, [r7, #22]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	441a      	add	r2, r3
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	801a      	strh	r2, [r3, #0]
		A_u32Address += 2 ;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3302      	adds	r3, #2
 80007d8:	60fb      	str	r3, [r7, #12]

		/* 6- wait for Busy Flag    */
		while(GET_Bit(FMI_Reg->SR, 16) == 1){}
 80007da:	bf00      	nop
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <FMI_vFlashWrite+0xb8>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	0c1b      	lsrs	r3, r3, #16
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d0f8      	beq.n	80007dc <FMI_vFlashWrite+0x78>
		/* 7- Clear EOP flag   */
		SET_Bit(FMI_Reg->SR, 0);
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <FMI_vFlashWrite+0xb8>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	4a0b      	ldr	r2, [pc, #44]	; (800081c <FMI_vFlashWrite+0xb8>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	60d3      	str	r3, [r2, #12]
	for(u16 i=0; i<A_u16Length; i++)
 80007f6:	8afb      	ldrh	r3, [r7, #22]
 80007f8:	3301      	adds	r3, #1
 80007fa:	82fb      	strh	r3, [r7, #22]
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	429a      	cmp	r2, r3
 8000802:	d3e0      	bcc.n	80007c6 <FMI_vFlashWrite+0x62>
	}
	/* 8- deactivate programming mode */
	CLR_Bit(FMI_Reg->CR, 0);
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <FMI_vFlashWrite+0xb8>)
 8000806:	691b      	ldr	r3, [r3, #16]
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <FMI_vFlashWrite+0xb8>)
 800080a:	f023 0301 	bic.w	r3, r3, #1
 800080e:	6113      	str	r3, [r2, #16]

}
 8000810:	bf00      	nop
 8000812:	371c      	adds	r7, #28
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40023c00 	.word	0x40023c00
 8000820:	45670123 	.word	0x45670123
 8000824:	cdef89ab 	.word	0xcdef89ab

08000828 <DIO_voidSetPinDirection>:

#include "GPIO_Private.h"
#include "GPIO_Interface.h"

void	DIO_voidSetPinDirection(u8 port, u8 pin, u8 Direction,u8 direction_type,u8 Out_direction_type)
{
 8000828:	b490      	push	{r4, r7}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4604      	mov	r4, r0
 8000830:	4608      	mov	r0, r1
 8000832:	4611      	mov	r1, r2
 8000834:	461a      	mov	r2, r3
 8000836:	4623      	mov	r3, r4
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	4603      	mov	r3, r0
 800083c:	71bb      	strb	r3, [r7, #6]
 800083e:	460b      	mov	r3, r1
 8000840:	717b      	strb	r3, [r7, #5]
 8000842:	4613      	mov	r3, r2
 8000844:	713b      	strb	r3, [r7, #4]
	if((port<=PORTE)&&(pin<pin15))
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b04      	cmp	r3, #4
 800084a:	f200 8603 	bhi.w	8001454 <DIO_voidSetPinDirection+0xc2c>
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	2b0e      	cmp	r3, #14
 8000852:	f200 85ff 	bhi.w	8001454 <DIO_voidSetPinDirection+0xc2c>
	{
		switch(port)
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b04      	cmp	r3, #4
 800085a:	f200 85fb 	bhi.w	8001454 <DIO_voidSetPinDirection+0xc2c>
 800085e:	a201      	add	r2, pc, #4	; (adr r2, 8000864 <DIO_voidSetPinDirection+0x3c>)
 8000860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000864:	08000879 	.word	0x08000879
 8000868:	08000b7b 	.word	0x08000b7b
 800086c:	08000db5 	.word	0x08000db5
 8000870:	08000fcf 	.word	0x08000fcf
 8000874:	08001209 	.word	0x08001209
		{
		case	PORTA:
			switch(Direction)
 8000878:	797b      	ldrb	r3, [r7, #5]
 800087a:	2b03      	cmp	r3, #3
 800087c:	f200 85e1 	bhi.w	8001442 <DIO_voidSetPinDirection+0xc1a>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <DIO_voidSetPinDirection+0x60>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	08000899 	.word	0x08000899
 800088c:	0800094d 	.word	0x0800094d
 8000890:	08000a47 	.word	0x08000a47
 8000894:	08000b45 	.word	0x08000b45
			{
			case	input :	GPIOA->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000898:	4b9d      	ldr	r3, [pc, #628]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	2103      	movs	r1, #3
 80008a2:	fa01 f202 	lsl.w	r2, r1, r2
 80008a6:	43d2      	mvns	r2, r2
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a99      	ldr	r2, [pc, #612]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80008ac:	400b      	ands	r3, r1
 80008ae:	6013      	str	r3, [r2, #0]
							GPIOA->GPIOA_B_X_MODER|=(input<<pin*2);
 80008b0:	4b97      	ldr	r3, [pc, #604]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80008b2:	4a97      	ldr	r2, [pc, #604]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	6013      	str	r3, [r2, #0]
							switch(direction_type)
 80008b8:	793b      	ldrb	r3, [r7, #4]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d02e      	beq.n	800091c <DIO_voidSetPinDirection+0xf4>
 80008be:	2b02      	cmp	r3, #2
 80008c0:	f300 8158 	bgt.w	8000b74 <DIO_voidSetPinDirection+0x34c>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <DIO_voidSetPinDirection+0xa6>
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d010      	beq.n	80008ee <DIO_voidSetPinDirection+0xc6>
							// make masking then set
							case No_pull_up:	GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin);GPIOA->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
							case Pull_up:		GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOA->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
							case Pull_down:		GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOA->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
							}
							break;
 80008cc:	e152      	b.n	8000b74 <DIO_voidSetPinDirection+0x34c>
							case No_pull_up:	GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin);GPIOA->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 80008ce:	4b90      	ldr	r3, [pc, #576]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	79ba      	ldrb	r2, [r7, #6]
 80008d4:	2103      	movs	r1, #3
 80008d6:	fa01 f202 	lsl.w	r2, r1, r2
 80008da:	43d2      	mvns	r2, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a8c      	ldr	r2, [pc, #560]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80008e0:	400b      	ands	r3, r1
 80008e2:	60d3      	str	r3, [r2, #12]
 80008e4:	4b8a      	ldr	r3, [pc, #552]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80008e6:	4a8a      	ldr	r2, [pc, #552]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	60d3      	str	r3, [r2, #12]
 80008ec:	e02d      	b.n	800094a <DIO_voidSetPinDirection+0x122>
							case Pull_up:		GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOA->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 80008ee:	4b88      	ldr	r3, [pc, #544]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	79ba      	ldrb	r2, [r7, #6]
 80008f4:	2103      	movs	r1, #3
 80008f6:	fa01 f202 	lsl.w	r2, r1, r2
 80008fa:	43d2      	mvns	r2, r2
 80008fc:	4611      	mov	r1, r2
 80008fe:	4a84      	ldr	r2, [pc, #528]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000900:	400b      	ands	r3, r1
 8000902:	60d3      	str	r3, [r2, #12]
 8000904:	4b82      	ldr	r3, [pc, #520]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	79ba      	ldrb	r2, [r7, #6]
 800090a:	0052      	lsls	r2, r2, #1
 800090c:	2101      	movs	r1, #1
 800090e:	fa01 f202 	lsl.w	r2, r1, r2
 8000912:	4611      	mov	r1, r2
 8000914:	4a7e      	ldr	r2, [pc, #504]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000916:	430b      	orrs	r3, r1
 8000918:	60d3      	str	r3, [r2, #12]
 800091a:	e016      	b.n	800094a <DIO_voidSetPinDirection+0x122>
							case Pull_down:		GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOA->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 800091c:	4b7c      	ldr	r3, [pc, #496]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	79ba      	ldrb	r2, [r7, #6]
 8000922:	2103      	movs	r1, #3
 8000924:	fa01 f202 	lsl.w	r2, r1, r2
 8000928:	43d2      	mvns	r2, r2
 800092a:	4611      	mov	r1, r2
 800092c:	4a78      	ldr	r2, [pc, #480]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 800092e:	400b      	ands	r3, r1
 8000930:	60d3      	str	r3, [r2, #12]
 8000932:	4b77      	ldr	r3, [pc, #476]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	79ba      	ldrb	r2, [r7, #6]
 8000938:	0052      	lsls	r2, r2, #1
 800093a:	2102      	movs	r1, #2
 800093c:	fa01 f202 	lsl.w	r2, r1, r2
 8000940:	4611      	mov	r1, r2
 8000942:	4a73      	ldr	r2, [pc, #460]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000944:	430b      	orrs	r3, r1
 8000946:	60d3      	str	r3, [r2, #12]
 8000948:	bf00      	nop
							break;
 800094a:	e113      	b.n	8000b74 <DIO_voidSetPinDirection+0x34c>

			case	output	:	GPIOA->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 800094c:	4b70      	ldr	r3, [pc, #448]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	0052      	lsls	r2, r2, #1
 8000954:	2103      	movs	r1, #3
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	43d2      	mvns	r2, r2
 800095c:	4611      	mov	r1, r2
 800095e:	4a6c      	ldr	r2, [pc, #432]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000960:	400b      	ands	r3, r1
 8000962:	6013      	str	r3, [r2, #0]
								GPIOA->GPIOA_B_X_MODER|=(output<<pin*2);
 8000964:	4b6a      	ldr	r3, [pc, #424]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	79ba      	ldrb	r2, [r7, #6]
 800096a:	0052      	lsls	r2, r2, #1
 800096c:	2101      	movs	r1, #1
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	4611      	mov	r1, r2
 8000974:	4a66      	ldr	r2, [pc, #408]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000976:	430b      	orrs	r3, r1
 8000978:	6013      	str	r3, [r2, #0]
								switch(direction_type)
 800097a:	793b      	ldrb	r3, [r7, #4]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d02d      	beq.n	80009dc <DIO_voidSetPinDirection+0x1b4>
 8000980:	2b02      	cmp	r3, #2
 8000982:	dc42      	bgt.n	8000a0a <DIO_voidSetPinDirection+0x1e2>
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <DIO_voidSetPinDirection+0x166>
 8000988:	2b01      	cmp	r3, #1
 800098a:	d010      	beq.n	80009ae <DIO_voidSetPinDirection+0x186>
 800098c:	e03d      	b.n	8000a0a <DIO_voidSetPinDirection+0x1e2>
								{
									// make masking then set
									case No_pull_up:	GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin);GPIOA->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 800098e:	4b60      	ldr	r3, [pc, #384]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	79ba      	ldrb	r2, [r7, #6]
 8000994:	2103      	movs	r1, #3
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	43d2      	mvns	r2, r2
 800099c:	4611      	mov	r1, r2
 800099e:	4a5c      	ldr	r2, [pc, #368]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80009a0:	400b      	ands	r3, r1
 80009a2:	60d3      	str	r3, [r2, #12]
 80009a4:	4b5a      	ldr	r3, [pc, #360]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80009a6:	4a5a      	ldr	r2, [pc, #360]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	60d3      	str	r3, [r2, #12]
 80009ac:	e02d      	b.n	8000a0a <DIO_voidSetPinDirection+0x1e2>
									case Pull_up:		GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOA->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 80009ae:	4b58      	ldr	r3, [pc, #352]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	79ba      	ldrb	r2, [r7, #6]
 80009b4:	2103      	movs	r1, #3
 80009b6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ba:	43d2      	mvns	r2, r2
 80009bc:	4611      	mov	r1, r2
 80009be:	4a54      	ldr	r2, [pc, #336]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80009c0:	400b      	ands	r3, r1
 80009c2:	60d3      	str	r3, [r2, #12]
 80009c4:	4b52      	ldr	r3, [pc, #328]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	79ba      	ldrb	r2, [r7, #6]
 80009ca:	0052      	lsls	r2, r2, #1
 80009cc:	2101      	movs	r1, #1
 80009ce:	fa01 f202 	lsl.w	r2, r1, r2
 80009d2:	4611      	mov	r1, r2
 80009d4:	4a4e      	ldr	r2, [pc, #312]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80009d6:	430b      	orrs	r3, r1
 80009d8:	60d3      	str	r3, [r2, #12]
 80009da:	e016      	b.n	8000a0a <DIO_voidSetPinDirection+0x1e2>
									case Pull_down:		GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOA->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 80009dc:	4b4c      	ldr	r3, [pc, #304]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	79ba      	ldrb	r2, [r7, #6]
 80009e2:	2103      	movs	r1, #3
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	43d2      	mvns	r2, r2
 80009ea:	4611      	mov	r1, r2
 80009ec:	4a48      	ldr	r2, [pc, #288]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80009ee:	400b      	ands	r3, r1
 80009f0:	60d3      	str	r3, [r2, #12]
 80009f2:	4b47      	ldr	r3, [pc, #284]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	79ba      	ldrb	r2, [r7, #6]
 80009f8:	0052      	lsls	r2, r2, #1
 80009fa:	2102      	movs	r1, #2
 80009fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000a00:	4611      	mov	r1, r2
 8000a02:	4a43      	ldr	r2, [pc, #268]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a04:	430b      	orrs	r3, r1
 8000a06:	60d3      	str	r3, [r2, #12]
 8000a08:	bf00      	nop
								}
								switch(Out_direction_type)
 8000a0a:	7c3b      	ldrb	r3, [r7, #16]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <DIO_voidSetPinDirection+0x1ee>
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d00c      	beq.n	8000a2e <DIO_voidSetPinDirection+0x206>
								{
									case Output_push_pull:	GPIOA->GPIOx_OTYPER&=~(1<<pin); break;
									case Output_open_drain:	GPIOA->GPIOx_OTYPER|=(1<<pin); break;

								}
								break;
 8000a14:	e0af      	b.n	8000b76 <DIO_voidSetPinDirection+0x34e>
									case Output_push_pull:	GPIOA->GPIOx_OTYPER&=~(1<<pin); break;
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	79ba      	ldrb	r2, [r7, #6]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a22:	43d2      	mvns	r2, r2
 8000a24:	4611      	mov	r1, r2
 8000a26:	4a3a      	ldr	r2, [pc, #232]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a28:	400b      	ands	r3, r1
 8000a2a:	6053      	str	r3, [r2, #4]
 8000a2c:	e00a      	b.n	8000a44 <DIO_voidSetPinDirection+0x21c>
									case Output_open_drain:	GPIOA->GPIOx_OTYPER|=(1<<pin); break;
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	79ba      	ldrb	r2, [r7, #6]
 8000a34:	2101      	movs	r1, #1
 8000a36:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4a34      	ldr	r2, [pc, #208]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	6053      	str	r3, [r2, #4]
 8000a42:	bf00      	nop
								break;
 8000a44:	e097      	b.n	8000b76 <DIO_voidSetPinDirection+0x34e>

			case	AF :	GPIOA->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	79ba      	ldrb	r2, [r7, #6]
 8000a4c:	0052      	lsls	r2, r2, #1
 8000a4e:	2103      	movs	r1, #3
 8000a50:	fa01 f202 	lsl.w	r2, r1, r2
 8000a54:	43d2      	mvns	r2, r2
 8000a56:	4611      	mov	r1, r2
 8000a58:	4a2d      	ldr	r2, [pc, #180]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a5a:	400b      	ands	r3, r1
 8000a5c:	6013      	str	r3, [r2, #0]
							GPIOA->GPIOA_B_X_MODER|=(AF<<pin*2);
 8000a5e:	4b2c      	ldr	r3, [pc, #176]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	0052      	lsls	r2, r2, #1
 8000a66:	2102      	movs	r1, #2
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]

							switch(direction_type)
 8000a74:	793b      	ldrb	r3, [r7, #4]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d02d      	beq.n	8000ad6 <DIO_voidSetPinDirection+0x2ae>
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	dc42      	bgt.n	8000b04 <DIO_voidSetPinDirection+0x2dc>
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <DIO_voidSetPinDirection+0x260>
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d010      	beq.n	8000aa8 <DIO_voidSetPinDirection+0x280>
 8000a86:	e03d      	b.n	8000b04 <DIO_voidSetPinDirection+0x2dc>
							{
								// make masking then set
								case No_pull_up:	GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin);GPIOA->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	79ba      	ldrb	r2, [r7, #6]
 8000a8e:	2103      	movs	r1, #3
 8000a90:	fa01 f202 	lsl.w	r2, r1, r2
 8000a94:	43d2      	mvns	r2, r2
 8000a96:	4611      	mov	r1, r2
 8000a98:	4a1d      	ldr	r2, [pc, #116]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	60d3      	str	r3, [r2, #12]
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60d3      	str	r3, [r2, #12]
 8000aa6:	e02d      	b.n	8000b04 <DIO_voidSetPinDirection+0x2dc>
								case Pull_up:		GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOA->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	79ba      	ldrb	r2, [r7, #6]
 8000aae:	2103      	movs	r1, #3
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000aba:	400b      	ands	r3, r1
 8000abc:	60d3      	str	r3, [r2, #12]
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	79ba      	ldrb	r2, [r7, #6]
 8000ac4:	0052      	lsls	r2, r2, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	60d3      	str	r3, [r2, #12]
 8000ad4:	e016      	b.n	8000b04 <DIO_voidSetPinDirection+0x2dc>
								case Pull_down:		GPIOA->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOA->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	79ba      	ldrb	r2, [r7, #6]
 8000adc:	2103      	movs	r1, #3
 8000ade:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae2:	43d2      	mvns	r2, r2
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000ae8:	400b      	ands	r3, r1
 8000aea:	60d3      	str	r3, [r2, #12]
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	79ba      	ldrb	r2, [r7, #6]
 8000af2:	0052      	lsls	r2, r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	fa01 f202 	lsl.w	r2, r1, r2
 8000afa:	4611      	mov	r1, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <DIO_voidSetPinDirection+0x2e8>)
 8000afe:	430b      	orrs	r3, r1
 8000b00:	60d3      	str	r3, [r2, #12]
 8000b02:	bf00      	nop
							}
							switch(Out_direction_type)
 8000b04:	7c3b      	ldrb	r3, [r7, #16]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <DIO_voidSetPinDirection+0x2ec>
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d00e      	beq.n	8000b2c <DIO_voidSetPinDirection+0x304>
							{
								case Output_push_pull:	GPIOA->GPIOx_OTYPER&=~(1<<pin); break;
								case Output_open_drain:	GPIOA->GPIOx_OTYPER|=(1<<pin); break;

							}
				break;
 8000b0e:	e032      	b.n	8000b76 <DIO_voidSetPinDirection+0x34e>
 8000b10:	40020000 	.word	0x40020000
								case Output_push_pull:	GPIOA->GPIOx_OTYPER&=~(1<<pin); break;
 8000b14:	4ba5      	ldr	r3, [pc, #660]	; (8000dac <DIO_voidSetPinDirection+0x584>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	79ba      	ldrb	r2, [r7, #6]
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b20:	43d2      	mvns	r2, r2
 8000b22:	4611      	mov	r1, r2
 8000b24:	4aa1      	ldr	r2, [pc, #644]	; (8000dac <DIO_voidSetPinDirection+0x584>)
 8000b26:	400b      	ands	r3, r1
 8000b28:	6053      	str	r3, [r2, #4]
 8000b2a:	e00a      	b.n	8000b42 <DIO_voidSetPinDirection+0x31a>
								case Output_open_drain:	GPIOA->GPIOx_OTYPER|=(1<<pin); break;
 8000b2c:	4b9f      	ldr	r3, [pc, #636]	; (8000dac <DIO_voidSetPinDirection+0x584>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	79ba      	ldrb	r2, [r7, #6]
 8000b32:	2101      	movs	r1, #1
 8000b34:	fa01 f202 	lsl.w	r2, r1, r2
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4a9c      	ldr	r2, [pc, #624]	; (8000dac <DIO_voidSetPinDirection+0x584>)
 8000b3c:	430b      	orrs	r3, r1
 8000b3e:	6053      	str	r3, [r2, #4]
 8000b40:	bf00      	nop
				break;
 8000b42:	e018      	b.n	8000b76 <DIO_voidSetPinDirection+0x34e>



			case	Analog :	GPIOA->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000b44:	4b99      	ldr	r3, [pc, #612]	; (8000dac <DIO_voidSetPinDirection+0x584>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	79ba      	ldrb	r2, [r7, #6]
 8000b4a:	0052      	lsls	r2, r2, #1
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	43d2      	mvns	r2, r2
 8000b54:	4611      	mov	r1, r2
 8000b56:	4a95      	ldr	r2, [pc, #596]	; (8000dac <DIO_voidSetPinDirection+0x584>)
 8000b58:	400b      	ands	r3, r1
 8000b5a:	6013      	str	r3, [r2, #0]
								GPIOA->GPIOA_B_X_MODER|=(Analog<<pin*2);
 8000b5c:	4b93      	ldr	r3, [pc, #588]	; (8000dac <DIO_voidSetPinDirection+0x584>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	79ba      	ldrb	r2, [r7, #6]
 8000b62:	0052      	lsls	r2, r2, #1
 8000b64:	2103      	movs	r1, #3
 8000b66:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4a8f      	ldr	r2, [pc, #572]	; (8000dac <DIO_voidSetPinDirection+0x584>)
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	6013      	str	r3, [r2, #0]
								break;
 8000b72:	e000      	b.n	8000b76 <DIO_voidSetPinDirection+0x34e>
							break;
 8000b74:	bf00      	nop
			}
			break;
 8000b76:	f000 bc64 	b.w	8001442 <DIO_voidSetPinDirection+0xc1a>
/*************************************************************************************/
			case	PORTB:
					switch(Direction)
 8000b7a:	797b      	ldrb	r3, [r7, #5]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	f200 8462 	bhi.w	8001446 <DIO_voidSetPinDirection+0xc1e>
 8000b82:	a201      	add	r2, pc, #4	; (adr r2, 8000b88 <DIO_voidSetPinDirection+0x360>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000b99 	.word	0x08000b99
 8000b8c:	08000c4d 	.word	0x08000c4d
 8000b90:	08000c7d 	.word	0x08000c7d
 8000b94:	08000d77 	.word	0x08000d77
					{
					case	input :	GPIOB->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000b98:	4b85      	ldr	r3, [pc, #532]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	79ba      	ldrb	r2, [r7, #6]
 8000b9e:	0052      	lsls	r2, r2, #1
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba6:	43d2      	mvns	r2, r2
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4a81      	ldr	r2, [pc, #516]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000bac:	400b      	ands	r3, r1
 8000bae:	6013      	str	r3, [r2, #0]
									GPIOB->GPIOA_B_X_MODER|=(input<<pin*2);
 8000bb0:	4b7f      	ldr	r3, [pc, #508]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000bb2:	4a7f      	ldr	r2, [pc, #508]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6013      	str	r3, [r2, #0]
									switch(direction_type)
 8000bb8:	793b      	ldrb	r3, [r7, #4]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d02e      	beq.n	8000c1c <DIO_voidSetPinDirection+0x3f4>
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	f300 80f1 	bgt.w	8000da6 <DIO_voidSetPinDirection+0x57e>
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <DIO_voidSetPinDirection+0x3a6>
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d010      	beq.n	8000bee <DIO_voidSetPinDirection+0x3c6>
									// make masking then set
									case No_pull_up:	GPIOB->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOB->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
									case Pull_up:		GPIOB->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOB->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
									case Pull_down:		GPIOB->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOB->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
									}
									break;
 8000bcc:	e0eb      	b.n	8000da6 <DIO_voidSetPinDirection+0x57e>
									case No_pull_up:	GPIOB->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOB->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 8000bce:	4b78      	ldr	r3, [pc, #480]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	79ba      	ldrb	r2, [r7, #6]
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bda:	43d2      	mvns	r2, r2
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4a74      	ldr	r2, [pc, #464]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000be0:	400b      	ands	r3, r1
 8000be2:	60d3      	str	r3, [r2, #12]
 8000be4:	4b72      	ldr	r3, [pc, #456]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000be6:	4a72      	ldr	r2, [pc, #456]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	60d3      	str	r3, [r2, #12]
 8000bec:	e02d      	b.n	8000c4a <DIO_voidSetPinDirection+0x422>
									case Pull_up:		GPIOB->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOB->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 8000bee:	4b70      	ldr	r3, [pc, #448]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	79ba      	ldrb	r2, [r7, #6]
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfa:	43d2      	mvns	r2, r2
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4a6c      	ldr	r2, [pc, #432]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c00:	400b      	ands	r3, r1
 8000c02:	60d3      	str	r3, [r2, #12]
 8000c04:	4b6a      	ldr	r3, [pc, #424]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	79ba      	ldrb	r2, [r7, #6]
 8000c0a:	0052      	lsls	r2, r2, #1
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c12:	4611      	mov	r1, r2
 8000c14:	4a66      	ldr	r2, [pc, #408]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c16:	430b      	orrs	r3, r1
 8000c18:	60d3      	str	r3, [r2, #12]
 8000c1a:	e016      	b.n	8000c4a <DIO_voidSetPinDirection+0x422>
									case Pull_down:		GPIOB->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOB->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 8000c1c:	4b64      	ldr	r3, [pc, #400]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	2103      	movs	r1, #3
 8000c24:	fa01 f202 	lsl.w	r2, r1, r2
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4a60      	ldr	r2, [pc, #384]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c2e:	400b      	ands	r3, r1
 8000c30:	60d3      	str	r3, [r2, #12]
 8000c32:	4b5f      	ldr	r3, [pc, #380]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	79ba      	ldrb	r2, [r7, #6]
 8000c38:	0052      	lsls	r2, r2, #1
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c40:	4611      	mov	r1, r2
 8000c42:	4a5b      	ldr	r2, [pc, #364]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c44:	430b      	orrs	r3, r1
 8000c46:	60d3      	str	r3, [r2, #12]
 8000c48:	bf00      	nop
									break;
 8000c4a:	e0ac      	b.n	8000da6 <DIO_voidSetPinDirection+0x57e>

					case	output	:	GPIOB->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000c4c:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	79ba      	ldrb	r2, [r7, #6]
 8000c52:	0052      	lsls	r2, r2, #1
 8000c54:	2103      	movs	r1, #3
 8000c56:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5a:	43d2      	mvns	r2, r2
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4a54      	ldr	r2, [pc, #336]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c60:	400b      	ands	r3, r1
 8000c62:	6013      	str	r3, [r2, #0]
										GPIOB->GPIOA_B_X_MODER|=(output<<pin*2);
 8000c64:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	79ba      	ldrb	r2, [r7, #6]
 8000c6a:	0052      	lsls	r2, r2, #1
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c72:	4611      	mov	r1, r2
 8000c74:	4a4e      	ldr	r2, [pc, #312]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c76:	430b      	orrs	r3, r1
 8000c78:	6013      	str	r3, [r2, #0]
										break;
 8000c7a:	e095      	b.n	8000da8 <DIO_voidSetPinDirection+0x580>

					case	AF :	GPIOB->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000c7c:	4b4c      	ldr	r3, [pc, #304]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	79ba      	ldrb	r2, [r7, #6]
 8000c82:	0052      	lsls	r2, r2, #1
 8000c84:	2103      	movs	r1, #3
 8000c86:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8a:	43d2      	mvns	r2, r2
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4a48      	ldr	r2, [pc, #288]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c90:	400b      	ands	r3, r1
 8000c92:	6013      	str	r3, [r2, #0]
									GPIOB->GPIOA_B_X_MODER|=(AF<<pin*2);
 8000c94:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	0052      	lsls	r2, r2, #1
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4a42      	ldr	r2, [pc, #264]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	6013      	str	r3, [r2, #0]
									switch(direction_type)
 8000caa:	793b      	ldrb	r3, [r7, #4]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d02d      	beq.n	8000d0c <DIO_voidSetPinDirection+0x4e4>
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	dc42      	bgt.n	8000d3a <DIO_voidSetPinDirection+0x512>
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <DIO_voidSetPinDirection+0x496>
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d010      	beq.n	8000cde <DIO_voidSetPinDirection+0x4b6>
 8000cbc:	e03d      	b.n	8000d3a <DIO_voidSetPinDirection+0x512>
									{
										// make masking then set
										case No_pull_up:	GPIOB->GPIOA_B_X_PUPDR&=~(0b11<<pin);GPIOB->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 8000cbe:	4b3c      	ldr	r3, [pc, #240]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	79ba      	ldrb	r2, [r7, #6]
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cca:	43d2      	mvns	r2, r2
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4a38      	ldr	r2, [pc, #224]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	60d3      	str	r3, [r2, #12]
 8000cd4:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000cd6:	4a36      	ldr	r2, [pc, #216]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	60d3      	str	r3, [r2, #12]
 8000cdc:	e02d      	b.n	8000d3a <DIO_voidSetPinDirection+0x512>
										case Pull_up:		GPIOB->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOB->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	79ba      	ldrb	r2, [r7, #6]
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	43d2      	mvns	r2, r2
 8000cec:	4611      	mov	r1, r2
 8000cee:	4a30      	ldr	r2, [pc, #192]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	60d3      	str	r3, [r2, #12]
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	79ba      	ldrb	r2, [r7, #6]
 8000cfa:	0052      	lsls	r2, r2, #1
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000d02:	4611      	mov	r1, r2
 8000d04:	4a2a      	ldr	r2, [pc, #168]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d06:	430b      	orrs	r3, r1
 8000d08:	60d3      	str	r3, [r2, #12]
 8000d0a:	e016      	b.n	8000d3a <DIO_voidSetPinDirection+0x512>
										case Pull_down:		GPIOB->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOB->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	79ba      	ldrb	r2, [r7, #6]
 8000d12:	2103      	movs	r1, #3
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	43d2      	mvns	r2, r2
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4a24      	ldr	r2, [pc, #144]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d1e:	400b      	ands	r3, r1
 8000d20:	60d3      	str	r3, [r2, #12]
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	79ba      	ldrb	r2, [r7, #6]
 8000d28:	0052      	lsls	r2, r2, #1
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	4611      	mov	r1, r2
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d34:	430b      	orrs	r3, r1
 8000d36:	60d3      	str	r3, [r2, #12]
 8000d38:	bf00      	nop
									}
									switch(Out_direction_type)
 8000d3a:	7c3b      	ldrb	r3, [r7, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <DIO_voidSetPinDirection+0x51e>
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d00c      	beq.n	8000d5e <DIO_voidSetPinDirection+0x536>
										case Output_push_pull:	GPIOB->GPIOx_OTYPER&=~(1<<pin); break;
										case Output_open_drain:	GPIOB->GPIOx_OTYPER|=(1<<pin); break;

									}

							break;
 8000d44:	e030      	b.n	8000da8 <DIO_voidSetPinDirection+0x580>
										case Output_push_pull:	GPIOB->GPIOx_OTYPER&=~(1<<pin); break;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	79ba      	ldrb	r2, [r7, #6]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	43d2      	mvns	r2, r2
 8000d54:	4611      	mov	r1, r2
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d58:	400b      	ands	r3, r1
 8000d5a:	6053      	str	r3, [r2, #4]
 8000d5c:	e00a      	b.n	8000d74 <DIO_voidSetPinDirection+0x54c>
										case Output_open_drain:	GPIOB->GPIOx_OTYPER|=(1<<pin); break;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	79ba      	ldrb	r2, [r7, #6]
 8000d64:	2101      	movs	r1, #1
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	6053      	str	r3, [r2, #4]
 8000d72:	bf00      	nop
							break;
 8000d74:	e018      	b.n	8000da8 <DIO_voidSetPinDirection+0x580>


					case	Analog :	GPIOB->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	79ba      	ldrb	r2, [r7, #6]
 8000d7c:	0052      	lsls	r2, r2, #1
 8000d7e:	2103      	movs	r1, #3
 8000d80:	fa01 f202 	lsl.w	r2, r1, r2
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	4611      	mov	r1, r2
 8000d88:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	6013      	str	r3, [r2, #0]
										GPIOB->GPIOA_B_X_MODER|=(Analog<<pin*2);
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	79ba      	ldrb	r2, [r7, #6]
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	2103      	movs	r1, #3
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <DIO_voidSetPinDirection+0x588>)
 8000da0:	430b      	orrs	r3, r1
 8000da2:	6013      	str	r3, [r2, #0]
										break;
 8000da4:	e000      	b.n	8000da8 <DIO_voidSetPinDirection+0x580>
									break;
 8000da6:	bf00      	nop
					}
			break;
 8000da8:	e34d      	b.n	8001446 <DIO_voidSetPinDirection+0xc1e>
 8000daa:	bf00      	nop
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020400 	.word	0x40020400
/***********************************************************************************/
			case	PORTC:
					switch(Direction)
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	f200 8347 	bhi.w	800144a <DIO_voidSetPinDirection+0xc22>
 8000dbc:	a201      	add	r2, pc, #4	; (adr r2, 8000dc4 <DIO_voidSetPinDirection+0x59c>)
 8000dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc2:	bf00      	nop
 8000dc4:	08000dd5 	.word	0x08000dd5
 8000dc8:	08000e89 	.word	0x08000e89
 8000dcc:	08000eb9 	.word	0x08000eb9
 8000dd0:	08000f9b 	.word	0x08000f9b
					{
					case	input :	GPIOC->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000dd4:	4b9b      	ldr	r3, [pc, #620]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	79ba      	ldrb	r2, [r7, #6]
 8000dda:	0052      	lsls	r2, r2, #1
 8000ddc:	2103      	movs	r1, #3
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	43d2      	mvns	r2, r2
 8000de4:	4611      	mov	r1, r2
 8000de6:	4a97      	ldr	r2, [pc, #604]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000de8:	400b      	ands	r3, r1
 8000dea:	6013      	str	r3, [r2, #0]
									GPIOC->GPIOA_B_X_MODER|=(input<<pin*2);
 8000dec:	4b95      	ldr	r3, [pc, #596]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000dee:	4a95      	ldr	r2, [pc, #596]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6013      	str	r3, [r2, #0]
									switch(direction_type)
 8000df4:	793b      	ldrb	r3, [r7, #4]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d02e      	beq.n	8000e58 <DIO_voidSetPinDirection+0x630>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	f300 80e5 	bgt.w	8000fca <DIO_voidSetPinDirection+0x7a2>
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <DIO_voidSetPinDirection+0x5e2>
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d010      	beq.n	8000e2a <DIO_voidSetPinDirection+0x602>
									// make masking then set
									case No_pull_up:	GPIOC->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOC->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
									case Pull_up:		GPIOC->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOC->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
									case Pull_down:		GPIOC->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOC->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
									}
									break;
 8000e08:	e0df      	b.n	8000fca <DIO_voidSetPinDirection+0x7a2>
									case No_pull_up:	GPIOC->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOC->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 8000e0a:	4b8e      	ldr	r3, [pc, #568]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	79ba      	ldrb	r2, [r7, #6]
 8000e10:	2103      	movs	r1, #3
 8000e12:	fa01 f202 	lsl.w	r2, r1, r2
 8000e16:	43d2      	mvns	r2, r2
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4a8a      	ldr	r2, [pc, #552]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	60d3      	str	r3, [r2, #12]
 8000e20:	4b88      	ldr	r3, [pc, #544]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e22:	4a88      	ldr	r2, [pc, #544]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	60d3      	str	r3, [r2, #12]
 8000e28:	e02d      	b.n	8000e86 <DIO_voidSetPinDirection+0x65e>
									case Pull_up:		GPIOC->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOC->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 8000e2a:	4b86      	ldr	r3, [pc, #536]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	79ba      	ldrb	r2, [r7, #6]
 8000e30:	2103      	movs	r1, #3
 8000e32:	fa01 f202 	lsl.w	r2, r1, r2
 8000e36:	43d2      	mvns	r2, r2
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4a82      	ldr	r2, [pc, #520]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e3c:	400b      	ands	r3, r1
 8000e3e:	60d3      	str	r3, [r2, #12]
 8000e40:	4b80      	ldr	r3, [pc, #512]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	79ba      	ldrb	r2, [r7, #6]
 8000e46:	0052      	lsls	r2, r2, #1
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4a7c      	ldr	r2, [pc, #496]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e52:	430b      	orrs	r3, r1
 8000e54:	60d3      	str	r3, [r2, #12]
 8000e56:	e016      	b.n	8000e86 <DIO_voidSetPinDirection+0x65e>
									case Pull_down:		GPIOC->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOC->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 8000e58:	4b7a      	ldr	r3, [pc, #488]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	79ba      	ldrb	r2, [r7, #6]
 8000e5e:	2103      	movs	r1, #3
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a76      	ldr	r2, [pc, #472]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e6a:	400b      	ands	r3, r1
 8000e6c:	60d3      	str	r3, [r2, #12]
 8000e6e:	4b75      	ldr	r3, [pc, #468]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	79ba      	ldrb	r2, [r7, #6]
 8000e74:	0052      	lsls	r2, r2, #1
 8000e76:	2102      	movs	r1, #2
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4a71      	ldr	r2, [pc, #452]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e80:	430b      	orrs	r3, r1
 8000e82:	60d3      	str	r3, [r2, #12]
 8000e84:	bf00      	nop
									break;
 8000e86:	e0a0      	b.n	8000fca <DIO_voidSetPinDirection+0x7a2>


					case	output	:	GPIOC->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000e88:	4b6e      	ldr	r3, [pc, #440]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	79ba      	ldrb	r2, [r7, #6]
 8000e8e:	0052      	lsls	r2, r2, #1
 8000e90:	2103      	movs	r1, #3
 8000e92:	fa01 f202 	lsl.w	r2, r1, r2
 8000e96:	43d2      	mvns	r2, r2
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4a6a      	ldr	r2, [pc, #424]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	6013      	str	r3, [r2, #0]
										GPIOC->GPIOA_B_X_MODER|=(output<<pin*2);
 8000ea0:	4b68      	ldr	r3, [pc, #416]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	79ba      	ldrb	r2, [r7, #6]
 8000ea6:	0052      	lsls	r2, r2, #1
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4a64      	ldr	r2, [pc, #400]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	6013      	str	r3, [r2, #0]
										break;
 8000eb6:	e089      	b.n	8000fcc <DIO_voidSetPinDirection+0x7a4>

					case	AF :	//GPIOC->GPIOA_B_X_MODER&=~(0b11<<pin*2);
									GPIOC->GPIOA_B_X_MODER|=(0b10<<pin*2);
 8000eb8:	4b62      	ldr	r3, [pc, #392]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	79ba      	ldrb	r2, [r7, #6]
 8000ebe:	0052      	lsls	r2, r2, #1
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4a5e      	ldr	r2, [pc, #376]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	6013      	str	r3, [r2, #0]
									switch(direction_type)
 8000ece:	793b      	ldrb	r3, [r7, #4]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d02d      	beq.n	8000f30 <DIO_voidSetPinDirection+0x708>
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	dc42      	bgt.n	8000f5e <DIO_voidSetPinDirection+0x736>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <DIO_voidSetPinDirection+0x6ba>
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d010      	beq.n	8000f02 <DIO_voidSetPinDirection+0x6da>
 8000ee0:	e03d      	b.n	8000f5e <DIO_voidSetPinDirection+0x736>
									{
										// make masking then set
										case No_pull_up:	GPIOC->GPIOA_B_X_PUPDR&=~(0b11<<pin);GPIOC->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 8000ee2:	4b58      	ldr	r3, [pc, #352]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	79ba      	ldrb	r2, [r7, #6]
 8000ee8:	2103      	movs	r1, #3
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	43d2      	mvns	r2, r2
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4a54      	ldr	r2, [pc, #336]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	60d3      	str	r3, [r2, #12]
 8000ef8:	4b52      	ldr	r3, [pc, #328]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000efa:	4a52      	ldr	r2, [pc, #328]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	60d3      	str	r3, [r2, #12]
 8000f00:	e02d      	b.n	8000f5e <DIO_voidSetPinDirection+0x736>
										case Pull_up:		GPIOC->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOC->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 8000f02:	4b50      	ldr	r3, [pc, #320]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	79ba      	ldrb	r2, [r7, #6]
 8000f08:	2103      	movs	r1, #3
 8000f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0e:	43d2      	mvns	r2, r2
 8000f10:	4611      	mov	r1, r2
 8000f12:	4a4c      	ldr	r2, [pc, #304]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f14:	400b      	ands	r3, r1
 8000f16:	60d3      	str	r3, [r2, #12]
 8000f18:	4b4a      	ldr	r3, [pc, #296]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	79ba      	ldrb	r2, [r7, #6]
 8000f1e:	0052      	lsls	r2, r2, #1
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	4611      	mov	r1, r2
 8000f28:	4a46      	ldr	r2, [pc, #280]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	60d3      	str	r3, [r2, #12]
 8000f2e:	e016      	b.n	8000f5e <DIO_voidSetPinDirection+0x736>
										case Pull_down:		GPIOC->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOC->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 8000f30:	4b44      	ldr	r3, [pc, #272]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	79ba      	ldrb	r2, [r7, #6]
 8000f36:	2103      	movs	r1, #3
 8000f38:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3c:	43d2      	mvns	r2, r2
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4a40      	ldr	r2, [pc, #256]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f42:	400b      	ands	r3, r1
 8000f44:	60d3      	str	r3, [r2, #12]
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	79ba      	ldrb	r2, [r7, #6]
 8000f4c:	0052      	lsls	r2, r2, #1
 8000f4e:	2102      	movs	r1, #2
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	4611      	mov	r1, r2
 8000f56:	4a3b      	ldr	r2, [pc, #236]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	60d3      	str	r3, [r2, #12]
 8000f5c:	bf00      	nop
									}
									switch(Out_direction_type)
 8000f5e:	7c3b      	ldrb	r3, [r7, #16]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <DIO_voidSetPinDirection+0x742>
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d00c      	beq.n	8000f82 <DIO_voidSetPinDirection+0x75a>
										case Output_push_pull:	GPIOC->GPIOx_OTYPER&=~(1<<pin); break;
										case Output_open_drain:	GPIOC->GPIOx_OTYPER|=(1<<pin); break;

									}

									break;
 8000f68:	e030      	b.n	8000fcc <DIO_voidSetPinDirection+0x7a4>
										case Output_push_pull:	GPIOC->GPIOx_OTYPER&=~(1<<pin); break;
 8000f6a:	4b36      	ldr	r3, [pc, #216]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	79ba      	ldrb	r2, [r7, #6]
 8000f70:	2101      	movs	r1, #1
 8000f72:	fa01 f202 	lsl.w	r2, r1, r2
 8000f76:	43d2      	mvns	r2, r2
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4a32      	ldr	r2, [pc, #200]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f7c:	400b      	ands	r3, r1
 8000f7e:	6053      	str	r3, [r2, #4]
 8000f80:	e00a      	b.n	8000f98 <DIO_voidSetPinDirection+0x770>
										case Output_open_drain:	GPIOC->GPIOx_OTYPER|=(1<<pin); break;
 8000f82:	4b30      	ldr	r3, [pc, #192]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	79ba      	ldrb	r2, [r7, #6]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4a2c      	ldr	r2, [pc, #176]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f92:	430b      	orrs	r3, r1
 8000f94:	6053      	str	r3, [r2, #4]
 8000f96:	bf00      	nop
									break;
 8000f98:	e018      	b.n	8000fcc <DIO_voidSetPinDirection+0x7a4>
					case	Analog :	GPIOC->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	79ba      	ldrb	r2, [r7, #6]
 8000fa0:	0052      	lsls	r2, r2, #1
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	4611      	mov	r1, r2
 8000fac:	4a25      	ldr	r2, [pc, #148]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	6013      	str	r3, [r2, #0]
										GPIOC->GPIOA_B_X_MODER|=(Analog<<pin*2);
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	79ba      	ldrb	r2, [r7, #6]
 8000fb8:	0052      	lsls	r2, r2, #1
 8000fba:	2103      	movs	r1, #3
 8000fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4a20      	ldr	r2, [pc, #128]	; (8001044 <DIO_voidSetPinDirection+0x81c>)
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	6013      	str	r3, [r2, #0]
										break;
 8000fc8:	e000      	b.n	8000fcc <DIO_voidSetPinDirection+0x7a4>
									break;
 8000fca:	bf00      	nop
					}
			break;
 8000fcc:	e23d      	b.n	800144a <DIO_voidSetPinDirection+0xc22>

/**************************************************************************************/
			case	PORTD:
							switch(Direction)
 8000fce:	797b      	ldrb	r3, [r7, #5]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	f200 823c 	bhi.w	800144e <DIO_voidSetPinDirection+0xc26>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <DIO_voidSetPinDirection+0x7b4>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	080010ab 	.word	0x080010ab
 8000fe4:	080010db 	.word	0x080010db
 8000fe8:	080011d5 	.word	0x080011d5
							{
							case	input :	GPIOD->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <DIO_voidSetPinDirection+0x820>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	79ba      	ldrb	r2, [r7, #6]
 8000ff2:	0052      	lsls	r2, r2, #1
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	43d2      	mvns	r2, r2
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <DIO_voidSetPinDirection+0x820>)
 8001000:	400b      	ands	r3, r1
 8001002:	6013      	str	r3, [r2, #0]
											GPIOD->GPIOA_B_X_MODER|=(input<<pin*2);
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <DIO_voidSetPinDirection+0x820>)
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <DIO_voidSetPinDirection+0x820>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6013      	str	r3, [r2, #0]
											switch(direction_type)
 800100c:	793b      	ldrb	r3, [r7, #4]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d033      	beq.n	800107a <DIO_voidSetPinDirection+0x852>
 8001012:	2b02      	cmp	r3, #2
 8001014:	f300 80f6 	bgt.w	8001204 <DIO_voidSetPinDirection+0x9dc>
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <DIO_voidSetPinDirection+0x7fa>
 800101c:	2b01      	cmp	r3, #1
 800101e:	d015      	beq.n	800104c <DIO_voidSetPinDirection+0x824>
											case No_pull_up:	GPIOD->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOD->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
											case Pull_up:		GPIOD->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOD->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
											case Pull_down:		GPIOD->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOD->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
											}

											break;
 8001020:	e0f0      	b.n	8001204 <DIO_voidSetPinDirection+0x9dc>
											case No_pull_up:	GPIOD->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOD->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <DIO_voidSetPinDirection+0x820>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	79ba      	ldrb	r2, [r7, #6]
 8001028:	2103      	movs	r1, #3
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	43d2      	mvns	r2, r2
 8001030:	4611      	mov	r1, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <DIO_voidSetPinDirection+0x820>)
 8001034:	400b      	ands	r3, r1
 8001036:	60d3      	str	r3, [r2, #12]
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <DIO_voidSetPinDirection+0x820>)
 800103a:	4a03      	ldr	r2, [pc, #12]	; (8001048 <DIO_voidSetPinDirection+0x820>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	60d3      	str	r3, [r2, #12]
 8001040:	e032      	b.n	80010a8 <DIO_voidSetPinDirection+0x880>
 8001042:	bf00      	nop
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
											case Pull_up:		GPIOD->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOD->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 800104c:	4ba3      	ldr	r3, [pc, #652]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	79ba      	ldrb	r2, [r7, #6]
 8001052:	2103      	movs	r1, #3
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	43d2      	mvns	r2, r2
 800105a:	4611      	mov	r1, r2
 800105c:	4a9f      	ldr	r2, [pc, #636]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 800105e:	400b      	ands	r3, r1
 8001060:	60d3      	str	r3, [r2, #12]
 8001062:	4b9e      	ldr	r3, [pc, #632]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	79ba      	ldrb	r2, [r7, #6]
 8001068:	0052      	lsls	r2, r2, #1
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	4611      	mov	r1, r2
 8001072:	4a9a      	ldr	r2, [pc, #616]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 8001074:	430b      	orrs	r3, r1
 8001076:	60d3      	str	r3, [r2, #12]
 8001078:	e016      	b.n	80010a8 <DIO_voidSetPinDirection+0x880>
											case Pull_down:		GPIOD->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOD->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 800107a:	4b98      	ldr	r3, [pc, #608]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	79ba      	ldrb	r2, [r7, #6]
 8001080:	2103      	movs	r1, #3
 8001082:	fa01 f202 	lsl.w	r2, r1, r2
 8001086:	43d2      	mvns	r2, r2
 8001088:	4611      	mov	r1, r2
 800108a:	4a94      	ldr	r2, [pc, #592]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 800108c:	400b      	ands	r3, r1
 800108e:	60d3      	str	r3, [r2, #12]
 8001090:	4b92      	ldr	r3, [pc, #584]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	79ba      	ldrb	r2, [r7, #6]
 8001096:	0052      	lsls	r2, r2, #1
 8001098:	2102      	movs	r1, #2
 800109a:	fa01 f202 	lsl.w	r2, r1, r2
 800109e:	4611      	mov	r1, r2
 80010a0:	4a8e      	ldr	r2, [pc, #568]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80010a2:	430b      	orrs	r3, r1
 80010a4:	60d3      	str	r3, [r2, #12]
 80010a6:	bf00      	nop
											break;
 80010a8:	e0ac      	b.n	8001204 <DIO_voidSetPinDirection+0x9dc>

							case	output	:	GPIOD->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 80010aa:	4b8c      	ldr	r3, [pc, #560]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	79ba      	ldrb	r2, [r7, #6]
 80010b0:	0052      	lsls	r2, r2, #1
 80010b2:	2103      	movs	r1, #3
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	43d2      	mvns	r2, r2
 80010ba:	4611      	mov	r1, r2
 80010bc:	4a87      	ldr	r2, [pc, #540]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80010be:	400b      	ands	r3, r1
 80010c0:	6013      	str	r3, [r2, #0]
												GPIOD->GPIOA_B_X_MODER|=(output<<pin*2);
 80010c2:	4b86      	ldr	r3, [pc, #536]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	0052      	lsls	r2, r2, #1
 80010ca:	2101      	movs	r1, #1
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	4611      	mov	r1, r2
 80010d2:	4a82      	ldr	r2, [pc, #520]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6013      	str	r3, [r2, #0]
												break;
 80010d8:	e095      	b.n	8001206 <DIO_voidSetPinDirection+0x9de>

							case	AF :	GPIOD->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 80010da:	4b80      	ldr	r3, [pc, #512]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	79ba      	ldrb	r2, [r7, #6]
 80010e0:	0052      	lsls	r2, r2, #1
 80010e2:	2103      	movs	r1, #3
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	43d2      	mvns	r2, r2
 80010ea:	4611      	mov	r1, r2
 80010ec:	4a7b      	ldr	r2, [pc, #492]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80010ee:	400b      	ands	r3, r1
 80010f0:	6013      	str	r3, [r2, #0]
											GPIOD->GPIOA_B_X_MODER|=(AF<<pin*2);
 80010f2:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	79ba      	ldrb	r2, [r7, #6]
 80010f8:	0052      	lsls	r2, r2, #1
 80010fa:	2102      	movs	r1, #2
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	4611      	mov	r1, r2
 8001102:	4a76      	ldr	r2, [pc, #472]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 8001104:	430b      	orrs	r3, r1
 8001106:	6013      	str	r3, [r2, #0]
											switch(direction_type)
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d02d      	beq.n	800116a <DIO_voidSetPinDirection+0x942>
 800110e:	2b02      	cmp	r3, #2
 8001110:	dc42      	bgt.n	8001198 <DIO_voidSetPinDirection+0x970>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <DIO_voidSetPinDirection+0x8f4>
 8001116:	2b01      	cmp	r3, #1
 8001118:	d010      	beq.n	800113c <DIO_voidSetPinDirection+0x914>
 800111a:	e03d      	b.n	8001198 <DIO_voidSetPinDirection+0x970>
											{
												// make masking then set
												case No_pull_up:	GPIOD->GPIOA_B_X_PUPDR&=~(0b11<<pin);GPIOD->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 800111c:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	79ba      	ldrb	r2, [r7, #6]
 8001122:	2103      	movs	r1, #3
 8001124:	fa01 f202 	lsl.w	r2, r1, r2
 8001128:	43d2      	mvns	r2, r2
 800112a:	4611      	mov	r1, r2
 800112c:	4a6b      	ldr	r2, [pc, #428]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 800112e:	400b      	ands	r3, r1
 8001130:	60d3      	str	r3, [r2, #12]
 8001132:	4b6a      	ldr	r3, [pc, #424]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 8001134:	4a69      	ldr	r2, [pc, #420]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60d3      	str	r3, [r2, #12]
 800113a:	e02d      	b.n	8001198 <DIO_voidSetPinDirection+0x970>
												case Pull_up:		GPIOD->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOD->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 800113c:	4b67      	ldr	r3, [pc, #412]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	79ba      	ldrb	r2, [r7, #6]
 8001142:	2103      	movs	r1, #3
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	43d2      	mvns	r2, r2
 800114a:	4611      	mov	r1, r2
 800114c:	4a63      	ldr	r2, [pc, #396]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 800114e:	400b      	ands	r3, r1
 8001150:	60d3      	str	r3, [r2, #12]
 8001152:	4b62      	ldr	r3, [pc, #392]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	79ba      	ldrb	r2, [r7, #6]
 8001158:	0052      	lsls	r2, r2, #1
 800115a:	2101      	movs	r1, #1
 800115c:	fa01 f202 	lsl.w	r2, r1, r2
 8001160:	4611      	mov	r1, r2
 8001162:	4a5e      	ldr	r2, [pc, #376]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 8001164:	430b      	orrs	r3, r1
 8001166:	60d3      	str	r3, [r2, #12]
 8001168:	e016      	b.n	8001198 <DIO_voidSetPinDirection+0x970>
												case Pull_down:		GPIOD->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOD->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 800116a:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	79ba      	ldrb	r2, [r7, #6]
 8001170:	2103      	movs	r1, #3
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	43d2      	mvns	r2, r2
 8001178:	4611      	mov	r1, r2
 800117a:	4a58      	ldr	r2, [pc, #352]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 800117c:	400b      	ands	r3, r1
 800117e:	60d3      	str	r3, [r2, #12]
 8001180:	4b56      	ldr	r3, [pc, #344]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	79ba      	ldrb	r2, [r7, #6]
 8001186:	0052      	lsls	r2, r2, #1
 8001188:	2102      	movs	r1, #2
 800118a:	fa01 f202 	lsl.w	r2, r1, r2
 800118e:	4611      	mov	r1, r2
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 8001192:	430b      	orrs	r3, r1
 8001194:	60d3      	str	r3, [r2, #12]
 8001196:	bf00      	nop
											}
											switch(Out_direction_type)
 8001198:	7c3b      	ldrb	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <DIO_voidSetPinDirection+0x97c>
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d00c      	beq.n	80011bc <DIO_voidSetPinDirection+0x994>
												case Output_open_drain:	GPIOD->GPIOx_OTYPER|=(1<<pin); break;

											}


											break;
 80011a2:	e030      	b.n	8001206 <DIO_voidSetPinDirection+0x9de>
												case Output_push_pull:	GPIOD->GPIOx_OTYPER&=~(1<<pin); break;
 80011a4:	4b4d      	ldr	r3, [pc, #308]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	79ba      	ldrb	r2, [r7, #6]
 80011aa:	2101      	movs	r1, #1
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	43d2      	mvns	r2, r2
 80011b2:	4611      	mov	r1, r2
 80011b4:	4a49      	ldr	r2, [pc, #292]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80011b6:	400b      	ands	r3, r1
 80011b8:	6053      	str	r3, [r2, #4]
 80011ba:	e00a      	b.n	80011d2 <DIO_voidSetPinDirection+0x9aa>
												case Output_open_drain:	GPIOD->GPIOx_OTYPER|=(1<<pin); break;
 80011bc:	4b47      	ldr	r3, [pc, #284]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	2101      	movs	r1, #1
 80011c4:	fa01 f202 	lsl.w	r2, r1, r2
 80011c8:	4611      	mov	r1, r2
 80011ca:	4a44      	ldr	r2, [pc, #272]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80011cc:	430b      	orrs	r3, r1
 80011ce:	6053      	str	r3, [r2, #4]
 80011d0:	bf00      	nop
											break;
 80011d2:	e018      	b.n	8001206 <DIO_voidSetPinDirection+0x9de>

							case	Analog :	GPIOD->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	79ba      	ldrb	r2, [r7, #6]
 80011da:	0052      	lsls	r2, r2, #1
 80011dc:	2103      	movs	r1, #3
 80011de:	fa01 f202 	lsl.w	r2, r1, r2
 80011e2:	43d2      	mvns	r2, r2
 80011e4:	4611      	mov	r1, r2
 80011e6:	4a3d      	ldr	r2, [pc, #244]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80011e8:	400b      	ands	r3, r1
 80011ea:	6013      	str	r3, [r2, #0]
												GPIOD->GPIOA_B_X_MODER|=(Analog<<pin*2);
 80011ec:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	79ba      	ldrb	r2, [r7, #6]
 80011f2:	0052      	lsls	r2, r2, #1
 80011f4:	2103      	movs	r1, #3
 80011f6:	fa01 f202 	lsl.w	r2, r1, r2
 80011fa:	4611      	mov	r1, r2
 80011fc:	4a37      	ldr	r2, [pc, #220]	; (80012dc <DIO_voidSetPinDirection+0xab4>)
 80011fe:	430b      	orrs	r3, r1
 8001200:	6013      	str	r3, [r2, #0]
												break;
 8001202:	e000      	b.n	8001206 <DIO_voidSetPinDirection+0x9de>
											break;
 8001204:	bf00      	nop
							}
					break;
 8001206:	e122      	b.n	800144e <DIO_voidSetPinDirection+0xc26>


/***************************************************************************************/
					case	PORTE:
							switch(Direction)
 8001208:	797b      	ldrb	r3, [r7, #5]
 800120a:	2b03      	cmp	r3, #3
 800120c:	f200 8121 	bhi.w	8001452 <DIO_voidSetPinDirection+0xc2a>
 8001210:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <DIO_voidSetPinDirection+0x9f0>)
 8001212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001216:	bf00      	nop
 8001218:	08001229 	.word	0x08001229
 800121c:	080012e5 	.word	0x080012e5
 8001220:	08001315 	.word	0x08001315
 8001224:	0800140f 	.word	0x0800140f
							{
							case	input :	GPIOE->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	79ba      	ldrb	r2, [r7, #6]
 800122e:	0052      	lsls	r2, r2, #1
 8001230:	2103      	movs	r1, #3
 8001232:	fa01 f202 	lsl.w	r2, r1, r2
 8001236:	43d2      	mvns	r2, r2
 8001238:	4611      	mov	r1, r2
 800123a:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 800123c:	400b      	ands	r3, r1
 800123e:	6013      	str	r3, [r2, #0]
											GPIOE->GPIOA_B_X_MODER|=(input<<pin*2);
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 8001242:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6013      	str	r3, [r2, #0]
											switch(direction_type)
 8001248:	793b      	ldrb	r3, [r7, #4]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d02e      	beq.n	80012ac <DIO_voidSetPinDirection+0xa84>
 800124e:	2b02      	cmp	r3, #2
 8001250:	f300 80f5 	bgt.w	800143e <DIO_voidSetPinDirection+0xc16>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <DIO_voidSetPinDirection+0xa36>
 8001258:	2b01      	cmp	r3, #1
 800125a:	d010      	beq.n	800127e <DIO_voidSetPinDirection+0xa56>
											// make masking then set
											case No_pull_up:	GPIOE->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOE->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
											case Pull_up:		GPIOE->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOE->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
											case Pull_down:		GPIOE->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOE->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
											}
											break;
 800125c:	e0ef      	b.n	800143e <DIO_voidSetPinDirection+0xc16>
											case No_pull_up:	GPIOE->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOE->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	79ba      	ldrb	r2, [r7, #6]
 8001264:	2103      	movs	r1, #3
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	43d2      	mvns	r2, r2
 800126c:	4611      	mov	r1, r2
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 8001270:	400b      	ands	r3, r1
 8001272:	60d3      	str	r3, [r2, #12]
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 8001276:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	60d3      	str	r3, [r2, #12]
 800127c:	e02d      	b.n	80012da <DIO_voidSetPinDirection+0xab2>
											case Pull_up:		GPIOE->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOE->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	79ba      	ldrb	r2, [r7, #6]
 8001284:	2103      	movs	r1, #3
 8001286:	fa01 f202 	lsl.w	r2, r1, r2
 800128a:	43d2      	mvns	r2, r2
 800128c:	4611      	mov	r1, r2
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 8001290:	400b      	ands	r3, r1
 8001292:	60d3      	str	r3, [r2, #12]
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	79ba      	ldrb	r2, [r7, #6]
 800129a:	0052      	lsls	r2, r2, #1
 800129c:	2101      	movs	r1, #1
 800129e:	fa01 f202 	lsl.w	r2, r1, r2
 80012a2:	4611      	mov	r1, r2
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 80012a6:	430b      	orrs	r3, r1
 80012a8:	60d3      	str	r3, [r2, #12]
 80012aa:	e016      	b.n	80012da <DIO_voidSetPinDirection+0xab2>
											case Pull_down:		GPIOE->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOE->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	79ba      	ldrb	r2, [r7, #6]
 80012b2:	2103      	movs	r1, #3
 80012b4:	fa01 f202 	lsl.w	r2, r1, r2
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	4611      	mov	r1, r2
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 80012be:	400b      	ands	r3, r1
 80012c0:	60d3      	str	r3, [r2, #12]
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	79ba      	ldrb	r2, [r7, #6]
 80012c8:	0052      	lsls	r2, r2, #1
 80012ca:	2102      	movs	r1, #2
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4611      	mov	r1, r2
 80012d2:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <DIO_voidSetPinDirection+0xab8>)
 80012d4:	430b      	orrs	r3, r1
 80012d6:	60d3      	str	r3, [r2, #12]
 80012d8:	bf00      	nop
											break;
 80012da:	e0b0      	b.n	800143e <DIO_voidSetPinDirection+0xc16>
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021000 	.word	0x40021000

							case	output	:	GPIOE->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 80012e4:	4b5e      	ldr	r3, [pc, #376]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	79ba      	ldrb	r2, [r7, #6]
 80012ea:	0052      	lsls	r2, r2, #1
 80012ec:	2103      	movs	r1, #3
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	43d2      	mvns	r2, r2
 80012f4:	4611      	mov	r1, r2
 80012f6:	4a5a      	ldr	r2, [pc, #360]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 80012f8:	400b      	ands	r3, r1
 80012fa:	6013      	str	r3, [r2, #0]
												GPIOE->GPIOA_B_X_MODER|=(output<<pin*2);
 80012fc:	4b58      	ldr	r3, [pc, #352]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	79ba      	ldrb	r2, [r7, #6]
 8001302:	0052      	lsls	r2, r2, #1
 8001304:	2101      	movs	r1, #1
 8001306:	fa01 f202 	lsl.w	r2, r1, r2
 800130a:	4611      	mov	r1, r2
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 800130e:	430b      	orrs	r3, r1
 8001310:	6013      	str	r3, [r2, #0]
												break;
 8001312:	e095      	b.n	8001440 <DIO_voidSetPinDirection+0xc18>

							case	AF :	GPIOE->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 8001314:	4b52      	ldr	r3, [pc, #328]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	79ba      	ldrb	r2, [r7, #6]
 800131a:	0052      	lsls	r2, r2, #1
 800131c:	2103      	movs	r1, #3
 800131e:	fa01 f202 	lsl.w	r2, r1, r2
 8001322:	43d2      	mvns	r2, r2
 8001324:	4611      	mov	r1, r2
 8001326:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001328:	400b      	ands	r3, r1
 800132a:	6013      	str	r3, [r2, #0]
											GPIOE->GPIOA_B_X_MODER|=(AF<<pin*2);
 800132c:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	79ba      	ldrb	r2, [r7, #6]
 8001332:	0052      	lsls	r2, r2, #1
 8001334:	2102      	movs	r1, #2
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	4611      	mov	r1, r2
 800133c:	4a48      	ldr	r2, [pc, #288]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 800133e:	430b      	orrs	r3, r1
 8001340:	6013      	str	r3, [r2, #0]
											switch(direction_type)
 8001342:	793b      	ldrb	r3, [r7, #4]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d02d      	beq.n	80013a4 <DIO_voidSetPinDirection+0xb7c>
 8001348:	2b02      	cmp	r3, #2
 800134a:	dc42      	bgt.n	80013d2 <DIO_voidSetPinDirection+0xbaa>
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <DIO_voidSetPinDirection+0xb2e>
 8001350:	2b01      	cmp	r3, #1
 8001352:	d010      	beq.n	8001376 <DIO_voidSetPinDirection+0xb4e>
 8001354:	e03d      	b.n	80013d2 <DIO_voidSetPinDirection+0xbaa>
											{
												// make masking then set
												case No_pull_up:	GPIOE->GPIOA_B_X_PUPDR&=~(0b11<<pin);GPIOE->GPIOA_B_X_PUPDR&=~(No_pull_up<<pin*2); break;
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	79ba      	ldrb	r2, [r7, #6]
 800135c:	2103      	movs	r1, #3
 800135e:	fa01 f202 	lsl.w	r2, r1, r2
 8001362:	43d2      	mvns	r2, r2
 8001364:	4611      	mov	r1, r2
 8001366:	4a3e      	ldr	r2, [pc, #248]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001368:	400b      	ands	r3, r1
 800136a:	60d3      	str	r3, [r2, #12]
 800136c:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 800136e:	4a3c      	ldr	r2, [pc, #240]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	60d3      	str	r3, [r2, #12]
 8001374:	e02d      	b.n	80013d2 <DIO_voidSetPinDirection+0xbaa>
												case Pull_up:		GPIOE->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOE->GPIOA_B_X_PUPDR|=(Pull_up<<pin*2);break;
 8001376:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	79ba      	ldrb	r2, [r7, #6]
 800137c:	2103      	movs	r1, #3
 800137e:	fa01 f202 	lsl.w	r2, r1, r2
 8001382:	43d2      	mvns	r2, r2
 8001384:	4611      	mov	r1, r2
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001388:	400b      	ands	r3, r1
 800138a:	60d3      	str	r3, [r2, #12]
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	79ba      	ldrb	r2, [r7, #6]
 8001392:	0052      	lsls	r2, r2, #1
 8001394:	2101      	movs	r1, #1
 8001396:	fa01 f202 	lsl.w	r2, r1, r2
 800139a:	4611      	mov	r1, r2
 800139c:	4a30      	ldr	r2, [pc, #192]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 800139e:	430b      	orrs	r3, r1
 80013a0:	60d3      	str	r3, [r2, #12]
 80013a2:	e016      	b.n	80013d2 <DIO_voidSetPinDirection+0xbaa>
												case Pull_down:		GPIOE->GPIOA_B_X_PUPDR&=~(0b11<<pin); GPIOE->GPIOA_B_X_PUPDR|=(Pull_down<<pin*2); break;
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	79ba      	ldrb	r2, [r7, #6]
 80013aa:	2103      	movs	r1, #3
 80013ac:	fa01 f202 	lsl.w	r2, r1, r2
 80013b0:	43d2      	mvns	r2, r2
 80013b2:	4611      	mov	r1, r2
 80013b4:	4a2a      	ldr	r2, [pc, #168]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 80013b6:	400b      	ands	r3, r1
 80013b8:	60d3      	str	r3, [r2, #12]
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	79ba      	ldrb	r2, [r7, #6]
 80013c0:	0052      	lsls	r2, r2, #1
 80013c2:	2102      	movs	r1, #2
 80013c4:	fa01 f202 	lsl.w	r2, r1, r2
 80013c8:	4611      	mov	r1, r2
 80013ca:	4a25      	ldr	r2, [pc, #148]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 80013cc:	430b      	orrs	r3, r1
 80013ce:	60d3      	str	r3, [r2, #12]
 80013d0:	bf00      	nop
											}
											switch(Out_direction_type)
 80013d2:	7c3b      	ldrb	r3, [r7, #16]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <DIO_voidSetPinDirection+0xbb6>
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d00c      	beq.n	80013f6 <DIO_voidSetPinDirection+0xbce>
											{
												case Output_push_pull:	GPIOE->GPIOx_OTYPER&=~(1<<pin); break;
												case Output_open_drain:	GPIOE->GPIOx_OTYPER|=(1<<pin); break;

											}
											break;
 80013dc:	e030      	b.n	8001440 <DIO_voidSetPinDirection+0xc18>
												case Output_push_pull:	GPIOE->GPIOx_OTYPER&=~(1<<pin); break;
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	79ba      	ldrb	r2, [r7, #6]
 80013e4:	2101      	movs	r1, #1
 80013e6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ea:	43d2      	mvns	r2, r2
 80013ec:	4611      	mov	r1, r2
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 80013f0:	400b      	ands	r3, r1
 80013f2:	6053      	str	r3, [r2, #4]
 80013f4:	e00a      	b.n	800140c <DIO_voidSetPinDirection+0xbe4>
												case Output_open_drain:	GPIOE->GPIOx_OTYPER|=(1<<pin); break;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	79ba      	ldrb	r2, [r7, #6]
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001402:	4611      	mov	r1, r2
 8001404:	4a16      	ldr	r2, [pc, #88]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001406:	430b      	orrs	r3, r1
 8001408:	6053      	str	r3, [r2, #4]
 800140a:	bf00      	nop
											break;
 800140c:	e018      	b.n	8001440 <DIO_voidSetPinDirection+0xc18>

							case	Analog :	GPIOE->GPIOA_B_X_MODER&=~(0b11<<pin*2);
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	79ba      	ldrb	r2, [r7, #6]
 8001414:	0052      	lsls	r2, r2, #1
 8001416:	2103      	movs	r1, #3
 8001418:	fa01 f202 	lsl.w	r2, r1, r2
 800141c:	43d2      	mvns	r2, r2
 800141e:	4611      	mov	r1, r2
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001422:	400b      	ands	r3, r1
 8001424:	6013      	str	r3, [r2, #0]
												GPIOE->GPIOA_B_X_MODER|=(Analog<<pin*2);
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	79ba      	ldrb	r2, [r7, #6]
 800142c:	0052      	lsls	r2, r2, #1
 800142e:	2103      	movs	r1, #3
 8001430:	fa01 f202 	lsl.w	r2, r1, r2
 8001434:	4611      	mov	r1, r2
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <DIO_voidSetPinDirection+0xc38>)
 8001438:	430b      	orrs	r3, r1
 800143a:	6013      	str	r3, [r2, #0]
												break;
 800143c:	e000      	b.n	8001440 <DIO_voidSetPinDirection+0xc18>
											break;
 800143e:	bf00      	nop
							}
					break;
 8001440:	e007      	b.n	8001452 <DIO_voidSetPinDirection+0xc2a>
			break;
 8001442:	bf00      	nop
 8001444:	e006      	b.n	8001454 <DIO_voidSetPinDirection+0xc2c>
			break;
 8001446:	bf00      	nop
 8001448:	e004      	b.n	8001454 <DIO_voidSetPinDirection+0xc2c>
			break;
 800144a:	bf00      	nop
 800144c:	e002      	b.n	8001454 <DIO_voidSetPinDirection+0xc2c>
					break;
 800144e:	bf00      	nop
 8001450:	e000      	b.n	8001454 <DIO_voidSetPinDirection+0xc2c>
					break;
 8001452:	bf00      	nop
	}
	else
	{
		// error handling
	}
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bc90      	pop	{r4, r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <DIO_voidSetPinSpeed>:

void	DIO_voidSetPinSpeed(u8 port, u8 pin, u8 Speed)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	460b      	mov	r3, r1
 8001470:	71bb      	strb	r3, [r7, #6]
 8001472:	4613      	mov	r3, r2
 8001474:	717b      	strb	r3, [r7, #5]
	if((port<=PORTE)&&(pin<=15))
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2b04      	cmp	r3, #4
 800147a:	f200 822f 	bhi.w	80018dc <DIO_voidSetPinSpeed+0x478>
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	f200 822b 	bhi.w	80018dc <DIO_voidSetPinSpeed+0x478>
	{
		switch(port)
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b04      	cmp	r3, #4
 800148a:	f200 8232 	bhi.w	80018f2 <DIO_voidSetPinSpeed+0x48e>
 800148e:	a201      	add	r2, pc, #4	; (adr r2, 8001494 <DIO_voidSetPinSpeed+0x30>)
 8001490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001494:	080014a9 	.word	0x080014a9
 8001498:	0800157d 	.word	0x0800157d
 800149c:	08001651 	.word	0x08001651
 80014a0:	08001725 	.word	0x08001725
 80014a4:	0800180b 	.word	0x0800180b
		{
		case	PORTA:
			switch(Speed)
 80014a8:	797b      	ldrb	r3, [r7, #5]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	f200 8218 	bhi.w	80018e0 <DIO_voidSetPinSpeed+0x47c>
 80014b0:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <DIO_voidSetPinSpeed+0x54>)
 80014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014c9 	.word	0x080014c9
 80014bc:	080014eb 	.word	0x080014eb
 80014c0:	0800151b 	.word	0x0800151b
 80014c4:	0800154b 	.word	0x0800154b
			{
			case Low_speed: 		GPIOA->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOA->GPIOx_B_OSPEEDR|=(Low_speed<<pin*2); break;
 80014c8:	4ba7      	ldr	r3, [pc, #668]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	79ba      	ldrb	r2, [r7, #6]
 80014ce:	0052      	lsls	r2, r2, #1
 80014d0:	2103      	movs	r1, #3
 80014d2:	fa01 f202 	lsl.w	r2, r1, r2
 80014d6:	43d2      	mvns	r2, r2
 80014d8:	4611      	mov	r1, r2
 80014da:	4aa3      	ldr	r2, [pc, #652]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 80014dc:	400b      	ands	r3, r1
 80014de:	6093      	str	r3, [r2, #8]
 80014e0:	4ba1      	ldr	r3, [pc, #644]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 80014e2:	4aa1      	ldr	r2, [pc, #644]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	6093      	str	r3, [r2, #8]
 80014e8:	e047      	b.n	800157a <DIO_voidSetPinSpeed+0x116>
			case Medium_speed:		GPIOA->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOA->GPIOx_B_OSPEEDR|=(Medium_speed<<pin*2); break;
 80014ea:	4b9f      	ldr	r3, [pc, #636]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	79ba      	ldrb	r2, [r7, #6]
 80014f0:	0052      	lsls	r2, r2, #1
 80014f2:	2103      	movs	r1, #3
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	43d2      	mvns	r2, r2
 80014fa:	4611      	mov	r1, r2
 80014fc:	4a9a      	ldr	r2, [pc, #616]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 80014fe:	400b      	ands	r3, r1
 8001500:	6093      	str	r3, [r2, #8]
 8001502:	4b99      	ldr	r3, [pc, #612]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	79ba      	ldrb	r2, [r7, #6]
 8001508:	0052      	lsls	r2, r2, #1
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	4611      	mov	r1, r2
 8001512:	4a95      	ldr	r2, [pc, #596]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 8001514:	430b      	orrs	r3, r1
 8001516:	6093      	str	r3, [r2, #8]
 8001518:	e02f      	b.n	800157a <DIO_voidSetPinSpeed+0x116>
			case High_speed: 		GPIOA->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOA->GPIOx_B_OSPEEDR|=(High_speed<<pin*2);	break;
 800151a:	4b93      	ldr	r3, [pc, #588]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	79ba      	ldrb	r2, [r7, #6]
 8001520:	0052      	lsls	r2, r2, #1
 8001522:	2103      	movs	r1, #3
 8001524:	fa01 f202 	lsl.w	r2, r1, r2
 8001528:	43d2      	mvns	r2, r2
 800152a:	4611      	mov	r1, r2
 800152c:	4a8e      	ldr	r2, [pc, #568]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 800152e:	400b      	ands	r3, r1
 8001530:	6093      	str	r3, [r2, #8]
 8001532:	4b8d      	ldr	r3, [pc, #564]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	79ba      	ldrb	r2, [r7, #6]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	2102      	movs	r1, #2
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4611      	mov	r1, r2
 8001542:	4a89      	ldr	r2, [pc, #548]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 8001544:	430b      	orrs	r3, r1
 8001546:	6093      	str	r3, [r2, #8]
 8001548:	e017      	b.n	800157a <DIO_voidSetPinSpeed+0x116>
			case Very_high_speed:	GPIOA->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOA->GPIOx_B_OSPEEDR|=(Very_high_speed<<pin*2);	break;
 800154a:	4b87      	ldr	r3, [pc, #540]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	79ba      	ldrb	r2, [r7, #6]
 8001550:	0052      	lsls	r2, r2, #1
 8001552:	2103      	movs	r1, #3
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	43d2      	mvns	r2, r2
 800155a:	4611      	mov	r1, r2
 800155c:	4a82      	ldr	r2, [pc, #520]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 800155e:	400b      	ands	r3, r1
 8001560:	6093      	str	r3, [r2, #8]
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	79ba      	ldrb	r2, [r7, #6]
 8001568:	0052      	lsls	r2, r2, #1
 800156a:	2103      	movs	r1, #3
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	4611      	mov	r1, r2
 8001572:	4a7d      	ldr	r2, [pc, #500]	; (8001768 <DIO_voidSetPinSpeed+0x304>)
 8001574:	430b      	orrs	r3, r1
 8001576:	6093      	str	r3, [r2, #8]
 8001578:	bf00      	nop
			}
		break;
 800157a:	e1b1      	b.n	80018e0 <DIO_voidSetPinSpeed+0x47c>

		case	PORTB:
		switch(Speed)
 800157c:	797b      	ldrb	r3, [r7, #5]
 800157e:	2b03      	cmp	r3, #3
 8001580:	f200 81b0 	bhi.w	80018e4 <DIO_voidSetPinSpeed+0x480>
 8001584:	a201      	add	r2, pc, #4	; (adr r2, 800158c <DIO_voidSetPinSpeed+0x128>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	0800159d 	.word	0x0800159d
 8001590:	080015bf 	.word	0x080015bf
 8001594:	080015ef 	.word	0x080015ef
 8001598:	0800161f 	.word	0x0800161f
		{
		case Low_speed: 		GPIOB->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOB->GPIOx_B_OSPEEDR|=(Low_speed<<pin*2); break;
 800159c:	4b73      	ldr	r3, [pc, #460]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	79ba      	ldrb	r2, [r7, #6]
 80015a2:	0052      	lsls	r2, r2, #1
 80015a4:	2103      	movs	r1, #3
 80015a6:	fa01 f202 	lsl.w	r2, r1, r2
 80015aa:	43d2      	mvns	r2, r2
 80015ac:	4611      	mov	r1, r2
 80015ae:	4a6f      	ldr	r2, [pc, #444]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 80015b0:	400b      	ands	r3, r1
 80015b2:	6093      	str	r3, [r2, #8]
 80015b4:	4b6d      	ldr	r3, [pc, #436]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 80015b6:	4a6d      	ldr	r2, [pc, #436]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	6093      	str	r3, [r2, #8]
 80015bc:	e047      	b.n	800164e <DIO_voidSetPinSpeed+0x1ea>
		case Medium_speed:		GPIOB->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOB->GPIOx_B_OSPEEDR|=(Medium_speed<<pin*2); break;
 80015be:	4b6b      	ldr	r3, [pc, #428]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	79ba      	ldrb	r2, [r7, #6]
 80015c4:	0052      	lsls	r2, r2, #1
 80015c6:	2103      	movs	r1, #3
 80015c8:	fa01 f202 	lsl.w	r2, r1, r2
 80015cc:	43d2      	mvns	r2, r2
 80015ce:	4611      	mov	r1, r2
 80015d0:	4a66      	ldr	r2, [pc, #408]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 80015d2:	400b      	ands	r3, r1
 80015d4:	6093      	str	r3, [r2, #8]
 80015d6:	4b65      	ldr	r3, [pc, #404]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	79ba      	ldrb	r2, [r7, #6]
 80015dc:	0052      	lsls	r2, r2, #1
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	4611      	mov	r1, r2
 80015e6:	4a61      	ldr	r2, [pc, #388]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 80015e8:	430b      	orrs	r3, r1
 80015ea:	6093      	str	r3, [r2, #8]
 80015ec:	e02f      	b.n	800164e <DIO_voidSetPinSpeed+0x1ea>
		case High_speed: 		GPIOB->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOB->GPIOx_B_OSPEEDR|=(High_speed<<pin*2);	break;
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	79ba      	ldrb	r2, [r7, #6]
 80015f4:	0052      	lsls	r2, r2, #1
 80015f6:	2103      	movs	r1, #3
 80015f8:	fa01 f202 	lsl.w	r2, r1, r2
 80015fc:	43d2      	mvns	r2, r2
 80015fe:	4611      	mov	r1, r2
 8001600:	4a5a      	ldr	r2, [pc, #360]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 8001602:	400b      	ands	r3, r1
 8001604:	6093      	str	r3, [r2, #8]
 8001606:	4b59      	ldr	r3, [pc, #356]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	79ba      	ldrb	r2, [r7, #6]
 800160c:	0052      	lsls	r2, r2, #1
 800160e:	2102      	movs	r1, #2
 8001610:	fa01 f202 	lsl.w	r2, r1, r2
 8001614:	4611      	mov	r1, r2
 8001616:	4a55      	ldr	r2, [pc, #340]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 8001618:	430b      	orrs	r3, r1
 800161a:	6093      	str	r3, [r2, #8]
 800161c:	e017      	b.n	800164e <DIO_voidSetPinSpeed+0x1ea>
		case Very_high_speed:	GPIOB->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOB->GPIOx_B_OSPEEDR|=(Very_high_speed<<pin*2);	break;
 800161e:	4b53      	ldr	r3, [pc, #332]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	79ba      	ldrb	r2, [r7, #6]
 8001624:	0052      	lsls	r2, r2, #1
 8001626:	2103      	movs	r1, #3
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	43d2      	mvns	r2, r2
 800162e:	4611      	mov	r1, r2
 8001630:	4a4e      	ldr	r2, [pc, #312]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 8001632:	400b      	ands	r3, r1
 8001634:	6093      	str	r3, [r2, #8]
 8001636:	4b4d      	ldr	r3, [pc, #308]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	79ba      	ldrb	r2, [r7, #6]
 800163c:	0052      	lsls	r2, r2, #1
 800163e:	2103      	movs	r1, #3
 8001640:	fa01 f202 	lsl.w	r2, r1, r2
 8001644:	4611      	mov	r1, r2
 8001646:	4a49      	ldr	r2, [pc, #292]	; (800176c <DIO_voidSetPinSpeed+0x308>)
 8001648:	430b      	orrs	r3, r1
 800164a:	6093      	str	r3, [r2, #8]
 800164c:	bf00      	nop
		}
		break;
 800164e:	e149      	b.n	80018e4 <DIO_voidSetPinSpeed+0x480>

		case	PORTC:
		switch(Speed)
 8001650:	797b      	ldrb	r3, [r7, #5]
 8001652:	2b03      	cmp	r3, #3
 8001654:	f200 8148 	bhi.w	80018e8 <DIO_voidSetPinSpeed+0x484>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <DIO_voidSetPinSpeed+0x1fc>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001671 	.word	0x08001671
 8001664:	08001693 	.word	0x08001693
 8001668:	080016c3 	.word	0x080016c3
 800166c:	080016f3 	.word	0x080016f3
		{
		case Low_speed: 		GPIOC->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOC->GPIOx_B_OSPEEDR|=(Low_speed<<pin*2); break;
 8001670:	4b3f      	ldr	r3, [pc, #252]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	79ba      	ldrb	r2, [r7, #6]
 8001676:	0052      	lsls	r2, r2, #1
 8001678:	2103      	movs	r1, #3
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	43d2      	mvns	r2, r2
 8001680:	4611      	mov	r1, r2
 8001682:	4a3b      	ldr	r2, [pc, #236]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 8001684:	400b      	ands	r3, r1
 8001686:	6093      	str	r3, [r2, #8]
 8001688:	4b39      	ldr	r3, [pc, #228]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 800168a:	4a39      	ldr	r2, [pc, #228]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	6093      	str	r3, [r2, #8]
 8001690:	e047      	b.n	8001722 <DIO_voidSetPinSpeed+0x2be>
		case Medium_speed:		GPIOC->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOC->GPIOx_B_OSPEEDR|=(Medium_speed<<pin*2); break;
 8001692:	4b37      	ldr	r3, [pc, #220]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	79ba      	ldrb	r2, [r7, #6]
 8001698:	0052      	lsls	r2, r2, #1
 800169a:	2103      	movs	r1, #3
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	43d2      	mvns	r2, r2
 80016a2:	4611      	mov	r1, r2
 80016a4:	4a32      	ldr	r2, [pc, #200]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 80016a6:	400b      	ands	r3, r1
 80016a8:	6093      	str	r3, [r2, #8]
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	79ba      	ldrb	r2, [r7, #6]
 80016b0:	0052      	lsls	r2, r2, #1
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	4611      	mov	r1, r2
 80016ba:	4a2d      	ldr	r2, [pc, #180]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 80016bc:	430b      	orrs	r3, r1
 80016be:	6093      	str	r3, [r2, #8]
 80016c0:	e02f      	b.n	8001722 <DIO_voidSetPinSpeed+0x2be>
		case High_speed: 		GPIOC->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOC->GPIOx_B_OSPEEDR|=(High_speed<<pin*2);	break;
 80016c2:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	79ba      	ldrb	r2, [r7, #6]
 80016c8:	0052      	lsls	r2, r2, #1
 80016ca:	2103      	movs	r1, #3
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	43d2      	mvns	r2, r2
 80016d2:	4611      	mov	r1, r2
 80016d4:	4a26      	ldr	r2, [pc, #152]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 80016d6:	400b      	ands	r3, r1
 80016d8:	6093      	str	r3, [r2, #8]
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	79ba      	ldrb	r2, [r7, #6]
 80016e0:	0052      	lsls	r2, r2, #1
 80016e2:	2102      	movs	r1, #2
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	4611      	mov	r1, r2
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6093      	str	r3, [r2, #8]
 80016f0:	e017      	b.n	8001722 <DIO_voidSetPinSpeed+0x2be>
		case Very_high_speed:	GPIOC->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOC->GPIOx_B_OSPEEDR|=(Very_high_speed<<pin*2);	break;
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	79ba      	ldrb	r2, [r7, #6]
 80016f8:	0052      	lsls	r2, r2, #1
 80016fa:	2103      	movs	r1, #3
 80016fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001700:	43d2      	mvns	r2, r2
 8001702:	4611      	mov	r1, r2
 8001704:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 8001706:	400b      	ands	r3, r1
 8001708:	6093      	str	r3, [r2, #8]
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	79ba      	ldrb	r2, [r7, #6]
 8001710:	0052      	lsls	r2, r2, #1
 8001712:	2103      	movs	r1, #3
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	4611      	mov	r1, r2
 800171a:	4a15      	ldr	r2, [pc, #84]	; (8001770 <DIO_voidSetPinSpeed+0x30c>)
 800171c:	430b      	orrs	r3, r1
 800171e:	6093      	str	r3, [r2, #8]
 8001720:	bf00      	nop
		}
		break;
 8001722:	e0e1      	b.n	80018e8 <DIO_voidSetPinSpeed+0x484>

		case	PORTD:
		switch(Speed)
 8001724:	797b      	ldrb	r3, [r7, #5]
 8001726:	2b03      	cmp	r3, #3
 8001728:	f200 80e0 	bhi.w	80018ec <DIO_voidSetPinSpeed+0x488>
 800172c:	a201      	add	r2, pc, #4	; (adr r2, 8001734 <DIO_voidSetPinSpeed+0x2d0>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	08001745 	.word	0x08001745
 8001738:	08001779 	.word	0x08001779
 800173c:	080017a9 	.word	0x080017a9
 8001740:	080017d9 	.word	0x080017d9
		{
		case Low_speed: 		GPIOD->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOD->GPIOx_B_OSPEEDR|=(Low_speed<<pin*2); break;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <DIO_voidSetPinSpeed+0x310>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	79ba      	ldrb	r2, [r7, #6]
 800174a:	0052      	lsls	r2, r2, #1
 800174c:	2103      	movs	r1, #3
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	43d2      	mvns	r2, r2
 8001754:	4611      	mov	r1, r2
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <DIO_voidSetPinSpeed+0x310>)
 8001758:	400b      	ands	r3, r1
 800175a:	6093      	str	r3, [r2, #8]
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <DIO_voidSetPinSpeed+0x310>)
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <DIO_voidSetPinSpeed+0x310>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	6093      	str	r3, [r2, #8]
 8001764:	e050      	b.n	8001808 <DIO_voidSetPinSpeed+0x3a4>
 8001766:	bf00      	nop
 8001768:	40020000 	.word	0x40020000
 800176c:	40020400 	.word	0x40020400
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
		case Medium_speed:		GPIOD->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOD->GPIOx_B_OSPEEDR|=(Medium_speed<<pin*2); break;
 8001778:	4b61      	ldr	r3, [pc, #388]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	79ba      	ldrb	r2, [r7, #6]
 800177e:	0052      	lsls	r2, r2, #1
 8001780:	2103      	movs	r1, #3
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	43d2      	mvns	r2, r2
 8001788:	4611      	mov	r1, r2
 800178a:	4a5d      	ldr	r2, [pc, #372]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 800178c:	400b      	ands	r3, r1
 800178e:	6093      	str	r3, [r2, #8]
 8001790:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	79ba      	ldrb	r2, [r7, #6]
 8001796:	0052      	lsls	r2, r2, #1
 8001798:	2101      	movs	r1, #1
 800179a:	fa01 f202 	lsl.w	r2, r1, r2
 800179e:	4611      	mov	r1, r2
 80017a0:	4a57      	ldr	r2, [pc, #348]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 80017a2:	430b      	orrs	r3, r1
 80017a4:	6093      	str	r3, [r2, #8]
 80017a6:	e02f      	b.n	8001808 <DIO_voidSetPinSpeed+0x3a4>
		case High_speed: 		GPIOD->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOD->GPIOx_B_OSPEEDR|=(High_speed<<pin*2);	break;
 80017a8:	4b55      	ldr	r3, [pc, #340]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	79ba      	ldrb	r2, [r7, #6]
 80017ae:	0052      	lsls	r2, r2, #1
 80017b0:	2103      	movs	r1, #3
 80017b2:	fa01 f202 	lsl.w	r2, r1, r2
 80017b6:	43d2      	mvns	r2, r2
 80017b8:	4611      	mov	r1, r2
 80017ba:	4a51      	ldr	r2, [pc, #324]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 80017bc:	400b      	ands	r3, r1
 80017be:	6093      	str	r3, [r2, #8]
 80017c0:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	79ba      	ldrb	r2, [r7, #6]
 80017c6:	0052      	lsls	r2, r2, #1
 80017c8:	2102      	movs	r1, #2
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	4611      	mov	r1, r2
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 80017d2:	430b      	orrs	r3, r1
 80017d4:	6093      	str	r3, [r2, #8]
 80017d6:	e017      	b.n	8001808 <DIO_voidSetPinSpeed+0x3a4>
		case Very_high_speed:	GPIOD->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOD->GPIOx_B_OSPEEDR|=(Very_high_speed<<pin*2);	break;
 80017d8:	4b49      	ldr	r3, [pc, #292]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	79ba      	ldrb	r2, [r7, #6]
 80017de:	0052      	lsls	r2, r2, #1
 80017e0:	2103      	movs	r1, #3
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	43d2      	mvns	r2, r2
 80017e8:	4611      	mov	r1, r2
 80017ea:	4a45      	ldr	r2, [pc, #276]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 80017ec:	400b      	ands	r3, r1
 80017ee:	6093      	str	r3, [r2, #8]
 80017f0:	4b43      	ldr	r3, [pc, #268]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	79ba      	ldrb	r2, [r7, #6]
 80017f6:	0052      	lsls	r2, r2, #1
 80017f8:	2103      	movs	r1, #3
 80017fa:	fa01 f202 	lsl.w	r2, r1, r2
 80017fe:	4611      	mov	r1, r2
 8001800:	4a3f      	ldr	r2, [pc, #252]	; (8001900 <DIO_voidSetPinSpeed+0x49c>)
 8001802:	430b      	orrs	r3, r1
 8001804:	6093      	str	r3, [r2, #8]
 8001806:	bf00      	nop
		}
		break;
 8001808:	e070      	b.n	80018ec <DIO_voidSetPinSpeed+0x488>

		case	PORTE:
		switch(Speed)
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d86f      	bhi.n	80018f0 <DIO_voidSetPinSpeed+0x48c>
 8001810:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <DIO_voidSetPinSpeed+0x3b4>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	08001829 	.word	0x08001829
 800181c:	0800184b 	.word	0x0800184b
 8001820:	0800187b 	.word	0x0800187b
 8001824:	080018ab 	.word	0x080018ab
		{
		case Low_speed: 		GPIOE->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOE->GPIOx_B_OSPEEDR|=(Low_speed<<pin*2); break;
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	79ba      	ldrb	r2, [r7, #6]
 800182e:	0052      	lsls	r2, r2, #1
 8001830:	2103      	movs	r1, #3
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	43d2      	mvns	r2, r2
 8001838:	4611      	mov	r1, r2
 800183a:	4a32      	ldr	r2, [pc, #200]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 800183c:	400b      	ands	r3, r1
 800183e:	6093      	str	r3, [r2, #8]
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 8001842:	4a30      	ldr	r2, [pc, #192]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	6093      	str	r3, [r2, #8]
 8001848:	e047      	b.n	80018da <DIO_voidSetPinSpeed+0x476>
		case Medium_speed:		GPIOE->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOE->GPIOx_B_OSPEEDR|=(Medium_speed<<pin*2); break;
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	79ba      	ldrb	r2, [r7, #6]
 8001850:	0052      	lsls	r2, r2, #1
 8001852:	2103      	movs	r1, #3
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	43d2      	mvns	r2, r2
 800185a:	4611      	mov	r1, r2
 800185c:	4a29      	ldr	r2, [pc, #164]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 800185e:	400b      	ands	r3, r1
 8001860:	6093      	str	r3, [r2, #8]
 8001862:	4b28      	ldr	r3, [pc, #160]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	79ba      	ldrb	r2, [r7, #6]
 8001868:	0052      	lsls	r2, r2, #1
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	4611      	mov	r1, r2
 8001872:	4a24      	ldr	r2, [pc, #144]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 8001874:	430b      	orrs	r3, r1
 8001876:	6093      	str	r3, [r2, #8]
 8001878:	e02f      	b.n	80018da <DIO_voidSetPinSpeed+0x476>
		case High_speed: 		GPIOE->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOE->GPIOx_B_OSPEEDR|=(High_speed<<pin*2);	break;
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	79ba      	ldrb	r2, [r7, #6]
 8001880:	0052      	lsls	r2, r2, #1
 8001882:	2103      	movs	r1, #3
 8001884:	fa01 f202 	lsl.w	r2, r1, r2
 8001888:	43d2      	mvns	r2, r2
 800188a:	4611      	mov	r1, r2
 800188c:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 800188e:	400b      	ands	r3, r1
 8001890:	6093      	str	r3, [r2, #8]
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	79ba      	ldrb	r2, [r7, #6]
 8001898:	0052      	lsls	r2, r2, #1
 800189a:	2102      	movs	r1, #2
 800189c:	fa01 f202 	lsl.w	r2, r1, r2
 80018a0:	4611      	mov	r1, r2
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6093      	str	r3, [r2, #8]
 80018a8:	e017      	b.n	80018da <DIO_voidSetPinSpeed+0x476>
		case Very_high_speed:	GPIOE->GPIOx_B_OSPEEDR&=~(0b11<<pin*2);GPIOE->GPIOx_B_OSPEEDR|=(Very_high_speed<<pin*2);	break;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	79ba      	ldrb	r2, [r7, #6]
 80018b0:	0052      	lsls	r2, r2, #1
 80018b2:	2103      	movs	r1, #3
 80018b4:	fa01 f202 	lsl.w	r2, r1, r2
 80018b8:	43d2      	mvns	r2, r2
 80018ba:	4611      	mov	r1, r2
 80018bc:	4a11      	ldr	r2, [pc, #68]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 80018be:	400b      	ands	r3, r1
 80018c0:	6093      	str	r3, [r2, #8]
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	79ba      	ldrb	r2, [r7, #6]
 80018c8:	0052      	lsls	r2, r2, #1
 80018ca:	2103      	movs	r1, #3
 80018cc:	fa01 f202 	lsl.w	r2, r1, r2
 80018d0:	4611      	mov	r1, r2
 80018d2:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <DIO_voidSetPinSpeed+0x4a0>)
 80018d4:	430b      	orrs	r3, r1
 80018d6:	6093      	str	r3, [r2, #8]
 80018d8:	bf00      	nop
		}
		break;
 80018da:	e009      	b.n	80018f0 <DIO_voidSetPinSpeed+0x48c>
		}
	}
 80018dc:	bf00      	nop
 80018de:	e008      	b.n	80018f2 <DIO_voidSetPinSpeed+0x48e>
		break;
 80018e0:	bf00      	nop
 80018e2:	e006      	b.n	80018f2 <DIO_voidSetPinSpeed+0x48e>
		break;
 80018e4:	bf00      	nop
 80018e6:	e004      	b.n	80018f2 <DIO_voidSetPinSpeed+0x48e>
		break;
 80018e8:	bf00      	nop
 80018ea:	e002      	b.n	80018f2 <DIO_voidSetPinSpeed+0x48e>
		break;
 80018ec:	bf00      	nop
 80018ee:	e000      	b.n	80018f2 <DIO_voidSetPinSpeed+0x48e>
		break;
 80018f0:	bf00      	nop
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40020c00 	.word	0x40020c00
 8001904:	40021000 	.word	0x40021000

08001908 <DIO_voidSetPinValue>:


void	DIO_voidSetPinValue(u8 port, u8 pin, u8 Value)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	460b      	mov	r3, r1
 8001914:	71bb      	strb	r3, [r7, #6]
 8001916:	4613      	mov	r3, r2
 8001918:	717b      	strb	r3, [r7, #5]
	if((port<=PORTE)&&(pin<=15))
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b04      	cmp	r3, #4
 800191e:	d86a      	bhi.n	80019f6 <DIO_voidSetPinValue+0xee>
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	2b0f      	cmp	r3, #15
 8001924:	d867      	bhi.n	80019f6 <DIO_voidSetPinValue+0xee>
		{
			if (Value == High)
 8001926:	797b      	ldrb	r3, [r7, #5]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d12d      	bne.n	8001988 <DIO_voidSetPinValue+0x80>
			{

				switch(port)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	2b04      	cmp	r3, #4
 8001930:	d862      	bhi.n	80019f8 <DIO_voidSetPinValue+0xf0>
 8001932:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <DIO_voidSetPinValue+0x30>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	0800194d 	.word	0x0800194d
 800193c:	08001959 	.word	0x08001959
 8001940:	08001965 	.word	0x08001965
 8001944:	08001971 	.word	0x08001971
 8001948:	0800197d 	.word	0x0800197d
				{
				case PORTA: GPIOA->GPIOx_BSRR=1<<pin; break;
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	2201      	movs	r2, #1
 8001950:	409a      	lsls	r2, r3
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <DIO_voidSetPinValue+0xfc>)
 8001954:	619a      	str	r2, [r3, #24]
 8001956:	e04f      	b.n	80019f8 <DIO_voidSetPinValue+0xf0>
				case PORTB: GPIOB->GPIOx_BSRR=1<<pin; break;
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	2201      	movs	r2, #1
 800195c:	409a      	lsls	r2, r3
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <DIO_voidSetPinValue+0x100>)
 8001960:	619a      	str	r2, [r3, #24]
 8001962:	e049      	b.n	80019f8 <DIO_voidSetPinValue+0xf0>
				case PORTC: GPIOC->GPIOx_BSRR=1<<pin; break;
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	2201      	movs	r2, #1
 8001968:	409a      	lsls	r2, r3
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <DIO_voidSetPinValue+0x104>)
 800196c:	619a      	str	r2, [r3, #24]
 800196e:	e043      	b.n	80019f8 <DIO_voidSetPinValue+0xf0>
				case PORTD: GPIOD->GPIOx_BSRR=1<<pin; break;
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	2201      	movs	r2, #1
 8001974:	409a      	lsls	r2, r3
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <DIO_voidSetPinValue+0x108>)
 8001978:	619a      	str	r2, [r3, #24]
 800197a:	e03d      	b.n	80019f8 <DIO_voidSetPinValue+0xf0>
				case PORTE: GPIOE->GPIOx_BSRR=1<<pin; break;
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	2201      	movs	r2, #1
 8001980:	409a      	lsls	r2, r3
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <DIO_voidSetPinValue+0x10c>)
 8001984:	619a      	str	r2, [r3, #24]
 8001986:	e037      	b.n	80019f8 <DIO_voidSetPinValue+0xf0>
				}
			}
			else if (Value == Low)
 8001988:	797b      	ldrb	r3, [r7, #5]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d133      	bne.n	80019f6 <DIO_voidSetPinValue+0xee>
			{
				switch(port)
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b04      	cmp	r3, #4
 8001992:	d831      	bhi.n	80019f8 <DIO_voidSetPinValue+0xf0>
 8001994:	a201      	add	r2, pc, #4	; (adr r2, 800199c <DIO_voidSetPinValue+0x94>)
 8001996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199a:	bf00      	nop
 800199c:	080019b1 	.word	0x080019b1
 80019a0:	080019bf 	.word	0x080019bf
 80019a4:	080019cd 	.word	0x080019cd
 80019a8:	080019db 	.word	0x080019db
 80019ac:	080019e9 	.word	0x080019e9
				{
				case PORTA: GPIOA->GPIOx_BSRR=(1<<(pin+16)); break;
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	3310      	adds	r3, #16
 80019b4:	2201      	movs	r2, #1
 80019b6:	409a      	lsls	r2, r3
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <DIO_voidSetPinValue+0xfc>)
 80019ba:	619a      	str	r2, [r3, #24]
 80019bc:	e01c      	b.n	80019f8 <DIO_voidSetPinValue+0xf0>
				case PORTB: GPIOB->GPIOx_BSRR=(1<<(pin+16)); break;
 80019be:	79bb      	ldrb	r3, [r7, #6]
 80019c0:	3310      	adds	r3, #16
 80019c2:	2201      	movs	r2, #1
 80019c4:	409a      	lsls	r2, r3
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <DIO_voidSetPinValue+0x100>)
 80019c8:	619a      	str	r2, [r3, #24]
 80019ca:	e015      	b.n	80019f8 <DIO_voidSetPinValue+0xf0>
				case PORTC: GPIOC->GPIOx_BSRR=(1<<(pin+16)); break;
 80019cc:	79bb      	ldrb	r3, [r7, #6]
 80019ce:	3310      	adds	r3, #16
 80019d0:	2201      	movs	r2, #1
 80019d2:	409a      	lsls	r2, r3
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <DIO_voidSetPinValue+0x104>)
 80019d6:	619a      	str	r2, [r3, #24]
 80019d8:	e00e      	b.n	80019f8 <DIO_voidSetPinValue+0xf0>
				case PORTD: GPIOD->GPIOx_BSRR=(1<<(pin+16)); break;
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	3310      	adds	r3, #16
 80019de:	2201      	movs	r2, #1
 80019e0:	409a      	lsls	r2, r3
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <DIO_voidSetPinValue+0x108>)
 80019e4:	619a      	str	r2, [r3, #24]
 80019e6:	e007      	b.n	80019f8 <DIO_voidSetPinValue+0xf0>
				case PORTE: GPIOE->GPIOx_BSRR=(1<<(pin+16)); break;
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	3310      	adds	r3, #16
 80019ec:	2201      	movs	r2, #1
 80019ee:	409a      	lsls	r2, r3
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <DIO_voidSetPinValue+0x10c>)
 80019f2:	619a      	str	r2, [r3, #24]
 80019f4:	e000      	b.n	80019f8 <DIO_voidSetPinValue+0xf0>
				}
			}
 80019f6:	bf00      	nop
		}

}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021000 	.word	0x40021000

08001a18 <AF_Select_pin_Fun>:

}


void AF_Select_pin_Fun(u8 port ,u8 pin , u8 Fun)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	460b      	mov	r3, r1
 8001a24:	71bb      	strb	r3, [r7, #6]
 8001a26:	4613      	mov	r3, r2
 8001a28:	717b      	strb	r3, [r7, #5]
	if(pin<8)
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	2b07      	cmp	r3, #7
 8001a2e:	d84b      	bhi.n	8001ac8 <AF_Select_pin_Fun+0xb0>
	{
		switch (port)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d84e      	bhi.n	8001ad4 <AF_Select_pin_Fun+0xbc>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <AF_Select_pin_Fun+0x24>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a51 	.word	0x08001a51
 8001a40:	08001a69 	.word	0x08001a69
 8001a44:	08001a81 	.word	0x08001a81
 8001a48:	08001a99 	.word	0x08001a99
 8001a4c:	08001ab1 	.word	0x08001ab1
		{
			case PORTA:	GPIOA->GPIOx_AFRL|=(Fun<<pin*4); break;
 8001a50:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <AF_Select_pin_Fun+0x160>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	7979      	ldrb	r1, [r7, #5]
 8001a56:	79ba      	ldrb	r2, [r7, #6]
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <AF_Select_pin_Fun+0x160>)
 8001a62:	430b      	orrs	r3, r1
 8001a64:	6213      	str	r3, [r2, #32]
 8001a66:	e035      	b.n	8001ad4 <AF_Select_pin_Fun+0xbc>
			case PORTB:	GPIOB->GPIOx_AFRL|=(Fun<<pin*4); break;
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <AF_Select_pin_Fun+0x164>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	7979      	ldrb	r1, [r7, #5]
 8001a6e:	79ba      	ldrb	r2, [r7, #6]
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	4611      	mov	r1, r2
 8001a78:	4a40      	ldr	r2, [pc, #256]	; (8001b7c <AF_Select_pin_Fun+0x164>)
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6213      	str	r3, [r2, #32]
 8001a7e:	e029      	b.n	8001ad4 <AF_Select_pin_Fun+0xbc>
			case PORTC:	GPIOC->GPIOx_AFRL|=(Fun<<pin*4); break;
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <AF_Select_pin_Fun+0x168>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	7979      	ldrb	r1, [r7, #5]
 8001a86:	79ba      	ldrb	r2, [r7, #6]
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4a3b      	ldr	r2, [pc, #236]	; (8001b80 <AF_Select_pin_Fun+0x168>)
 8001a92:	430b      	orrs	r3, r1
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	e01d      	b.n	8001ad4 <AF_Select_pin_Fun+0xbc>
			case PORTD:	GPIOD->GPIOx_AFRL|=(Fun<<pin*4); break;
 8001a98:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <AF_Select_pin_Fun+0x16c>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	7979      	ldrb	r1, [r7, #5]
 8001a9e:	79ba      	ldrb	r2, [r7, #6]
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4a36      	ldr	r2, [pc, #216]	; (8001b84 <AF_Select_pin_Fun+0x16c>)
 8001aaa:	430b      	orrs	r3, r1
 8001aac:	6213      	str	r3, [r2, #32]
 8001aae:	e011      	b.n	8001ad4 <AF_Select_pin_Fun+0xbc>
			case PORTE:	GPIOE->GPIOx_AFRL|=(Fun<<pin*4); break;
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <AF_Select_pin_Fun+0x170>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	7979      	ldrb	r1, [r7, #5]
 8001ab6:	79ba      	ldrb	r2, [r7, #6]
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <AF_Select_pin_Fun+0x170>)
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	e005      	b.n	8001ad4 <AF_Select_pin_Fun+0xbc>
		}
	}
	else if (pin<16)
 8001ac8:	79bb      	ldrb	r3, [r7, #6]
 8001aca:	2b0f      	cmp	r3, #15
 8001acc:	d802      	bhi.n	8001ad4 <AF_Select_pin_Fun+0xbc>
		pin-=8;
 8001ace:	79bb      	ldrb	r3, [r7, #6]
 8001ad0:	3b08      	subs	r3, #8
 8001ad2:	71bb      	strb	r3, [r7, #6]
	{
		switch (port)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d848      	bhi.n	8001b6c <AF_Select_pin_Fun+0x154>
 8001ada:	a201      	add	r2, pc, #4	; (adr r2, 8001ae0 <AF_Select_pin_Fun+0xc8>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001af5 	.word	0x08001af5
 8001ae4:	08001b0d 	.word	0x08001b0d
 8001ae8:	08001b25 	.word	0x08001b25
 8001aec:	08001b3d 	.word	0x08001b3d
 8001af0:	08001b55 	.word	0x08001b55
		{
			case PORTA:	GPIOA->GPIOx_AFRH|=(Fun<<pin*4); break;
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <AF_Select_pin_Fun+0x160>)
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	7979      	ldrb	r1, [r7, #5]
 8001afa:	79ba      	ldrb	r2, [r7, #6]
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	fa01 f202 	lsl.w	r2, r1, r2
 8001b02:	4611      	mov	r1, r2
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <AF_Select_pin_Fun+0x160>)
 8001b06:	430b      	orrs	r3, r1
 8001b08:	6253      	str	r3, [r2, #36]	; 0x24
 8001b0a:	e02f      	b.n	8001b6c <AF_Select_pin_Fun+0x154>
			case PORTB:	GPIOB->GPIOx_AFRH|=(Fun<<pin*4); break;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <AF_Select_pin_Fun+0x164>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	7979      	ldrb	r1, [r7, #5]
 8001b12:	79ba      	ldrb	r2, [r7, #6]
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <AF_Select_pin_Fun+0x164>)
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	6253      	str	r3, [r2, #36]	; 0x24
 8001b22:	e023      	b.n	8001b6c <AF_Select_pin_Fun+0x154>
			case PORTC:	GPIOC->GPIOx_AFRH|=(Fun<<pin*4); break;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <AF_Select_pin_Fun+0x168>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	7979      	ldrb	r1, [r7, #5]
 8001b2a:	79ba      	ldrb	r2, [r7, #6]
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	4611      	mov	r1, r2
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <AF_Select_pin_Fun+0x168>)
 8001b36:	430b      	orrs	r3, r1
 8001b38:	6253      	str	r3, [r2, #36]	; 0x24
 8001b3a:	e017      	b.n	8001b6c <AF_Select_pin_Fun+0x154>
			case PORTD:	GPIOD->GPIOx_AFRH|=(Fun<<pin*4); break;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <AF_Select_pin_Fun+0x16c>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	7979      	ldrb	r1, [r7, #5]
 8001b42:	79ba      	ldrb	r2, [r7, #6]
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <AF_Select_pin_Fun+0x16c>)
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	6253      	str	r3, [r2, #36]	; 0x24
 8001b52:	e00b      	b.n	8001b6c <AF_Select_pin_Fun+0x154>
			case PORTE:	GPIOE->GPIOx_AFRH|=(Fun<<pin*4); break;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <AF_Select_pin_Fun+0x170>)
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	7979      	ldrb	r1, [r7, #5]
 8001b5a:	79ba      	ldrb	r2, [r7, #6]
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	4611      	mov	r1, r2
 8001b64:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <AF_Select_pin_Fun+0x170>)
 8001b66:	430b      	orrs	r3, r1
 8001b68:	6253      	str	r3, [r2, #36]	; 0x24
 8001b6a:	bf00      	nop

		}
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021000 	.word	0x40021000

08001b8c <swapBitsInArray>:
           ((value >> 8) & 0xFF00) |
           ((value << 8) & 0xFF0000) |
           ((value << 24) & 0xFF000000);
}

void swapBitsInArray(u16 *array, u8 length) {
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
    for (u8 i = 0; i < length; ++i) {
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	e019      	b.n	8001bd2 <swapBitsInArray+0x46>
        array[i] = ((array[i] >> 8) & 0x00FF) | ((array[i] << 8) & 0xFF00);
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	440b      	add	r3, r1
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b219      	sxth	r1, r3
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b28a      	uxth	r2, r1
 8001bca:	801a      	strh	r2, [r3, #0]
    for (u8 i = 0; i < length; ++i) {
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d3e1      	bcc.n	8001b9e <swapBitsInArray+0x12>
    }
}
 8001bda:	bf00      	nop
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <Parser_2_AsciiHex>:
// we need to convert from text to Number ( hex or decemal or ... )
// so if the text is (No ) is num we (- '0') from it
// if the text is alfa. we (- 55)from the text .    ---> Note ('A' =65 in hex & A = 10 as a number )

static u8 Parser_2_AsciiHex( u8 Ascii)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
	u8 local_val= 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
	if(Ascii>='0' && Ascii<='9')
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b2f      	cmp	r3, #47	; 0x2f
 8001bfa:	d906      	bls.n	8001c0a <Parser_2_AsciiHex+0x22>
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b39      	cmp	r3, #57	; 0x39
 8001c00:	d803      	bhi.n	8001c0a <Parser_2_AsciiHex+0x22>
	{
		local_val = Ascii-'0';
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	3b30      	subs	r3, #48	; 0x30
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e008      	b.n	8001c1c <Parser_2_AsciiHex+0x34>
	}
	else if (Ascii>='A' && Ascii<='F')
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	2b40      	cmp	r3, #64	; 0x40
 8001c0e:	d905      	bls.n	8001c1c <Parser_2_AsciiHex+0x34>
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b46      	cmp	r3, #70	; 0x46
 8001c14:	d802      	bhi.n	8001c1c <Parser_2_AsciiHex+0x34>
	{
		local_val = Ascii-55;
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	3b37      	subs	r3, #55	; 0x37
 8001c1a:	73fb      	strb	r3, [r7, #15]
	}
	else
	{
		// return error
	}
	return local_val;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HEX_voidParseFrame1>:
	FMI_vFlashWrite(address, buffer, CC/2);

}

void HEX_voidParseFrame1(u8 data_arr[],u8* size , u32* address_hex,u8*recordtype,u16*data,u8 *checksum)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b0a2      	sub	sp, #136	; 0x88
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	603b      	str	r3, [r7, #0]
	u16 buffer[50]={0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2264      	movs	r2, #100	; 0x64
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fcdf 	bl	8002604 <memset>
	u8 i =0 ;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	// 4 digit for concat ( conversion )
	u8 dig1 , dig2 , dig3 , dig4;

	// Address Available
	u32 address = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	// convert char count
	CC_High= Parser_2_AsciiHex(data_arr[0]);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ffc6 	bl	8001be8 <Parser_2_AsciiHex>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	CC_Low= Parser_2_AsciiHex(data_arr[1]);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3301      	adds	r3, #1
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ffbd 	bl	8001be8 <Parser_2_AsciiHex>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	CC= (CC_High<<4)|(CC_Low);
 8001c74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	b25a      	sxtb	r2, r3
 8001c7c:	f997 307e 	ldrsb.w	r3, [r7, #126]	; 0x7e
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

	*size=CC;
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8001c8e:	701a      	strb	r2, [r3, #0]

	// convert Address ( low address) then concat with the high that is in first frame
	dig1= Parser_2_AsciiHex(data_arr[2]);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3302      	adds	r3, #2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ffa6 	bl	8001be8 <Parser_2_AsciiHex>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	dig2= Parser_2_AsciiHex(data_arr[3]);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3303      	adds	r3, #3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff9d 	bl	8001be8 <Parser_2_AsciiHex>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	dig3= Parser_2_AsciiHex(data_arr[4]);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff94 	bl	8001be8 <Parser_2_AsciiHex>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	dig4= Parser_2_AsciiHex(data_arr[5]);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3305      	adds	r3, #5
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff8b 	bl	8001be8 <Parser_2_AsciiHex>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79

	address = (flash_add)| (dig1<<12) | (dig2<<8)|(dig3<<4) | (dig4);
 8001cd8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001cdc:	031b      	lsls	r3, r3, #12
 8001cde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ce2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	*address_hex=address;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001d02:	601a      	str	r2, [r3, #0]

	dig1= Parser_2_AsciiHex(data_arr[6]);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3306      	adds	r3, #6
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff6c 	bl	8001be8 <Parser_2_AsciiHex>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	dig2= Parser_2_AsciiHex(data_arr[7]);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3307      	adds	r3, #7
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff63 	bl	8001be8 <Parser_2_AsciiHex>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	*recordtype= (dig1<<4)|dig2;
 8001d28:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	b25a      	sxtb	r2, r3
 8001d30:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]

	// then we need to convert data to send it
	// the data so big so we can cut it int small part and fill it to buffer to send it

	for(i=0 ; i< CC/2 ; i++) // CC is the data length this is the two byte in the hex frame
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001d44:	e063      	b.n	8001e0e <HEX_voidParseFrame1+0x1e4>
	{
		dig1= Parser_2_AsciiHex(data_arr[(i*4)+8]); // the start of data byte is 9
 8001d46:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	3308      	adds	r3, #8
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4413      	add	r3, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff47 	bl	8001be8 <Parser_2_AsciiHex>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		dig2= Parser_2_AsciiHex(data_arr[(i*4)+9]);
 8001d60:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	3309      	adds	r3, #9
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff3a 	bl	8001be8 <Parser_2_AsciiHex>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		dig3= Parser_2_AsciiHex(data_arr[(i*4)+10]);
 8001d7a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	330a      	adds	r3, #10
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff2d 	bl	8001be8 <Parser_2_AsciiHex>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		dig4= Parser_2_AsciiHex(data_arr[(i*4)+11]);
 8001d94:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	330b      	adds	r3, #11
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff20 	bl	8001be8 <Parser_2_AsciiHex>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
		buffer[i]= (dig1<<12) | (dig2<<8) | (dig3<<4) | dig4 ;
 8001dae:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001db2:	031b      	lsls	r3, r3, #12
 8001db4:	b21a      	sxth	r2, r3
 8001db6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001ddc:	b292      	uxth	r2, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	3388      	adds	r3, #136	; 0x88
 8001de2:	443b      	add	r3, r7
 8001de4:	f823 2c74 	strh.w	r2, [r3, #-116]
		data[i]=buffer[i];
 8001de8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001dec:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001df0:	0052      	lsls	r2, r2, #1
 8001df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001df6:	440a      	add	r2, r1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	3388      	adds	r3, #136	; 0x88
 8001dfc:	443b      	add	r3, r7
 8001dfe:	f833 3c74 	ldrh.w	r3, [r3, #-116]
 8001e02:	8013      	strh	r3, [r2, #0]
	for(i=0 ; i< CC/2 ; i++) // CC is the data length this is the two byte in the hex frame
 8001e04:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001e0e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d393      	bcc.n	8001d46 <HEX_voidParseFrame1+0x11c>
	}

	swapBitsInArray((u16*)buffer,CC/2);
 8001e1e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fead 	bl	8001b8c <swapBitsInArray>
	//RedesignHex2Bytes((u16*)buffer,(u32*) data, CC/2);
	//reversrBytesInBlock((u8*)buffer, 8);
	// check sum = last 2 number
	dig1 = Parser_2_AsciiHex(data_arr[i]);
 8001e32:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fed3 	bl	8001be8 <Parser_2_AsciiHex>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	dig2 = Parser_2_AsciiHex(data_arr[i+1]);
 8001e48:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4413      	add	r3, r2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fec7 	bl	8001be8 <Parser_2_AsciiHex>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	*checksum=(dig1<<4) | (dig2);
 8001e60:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	b25a      	sxtb	r2, r3
 8001e68:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e76:	701a      	strb	r2, [r3, #0]
	// so we have  length of data , address and data


	FMI_vFlashWrite(address,buffer, CC/2);
 8001e78:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001e8c:	f7fe fc6a 	bl	8000764 <FMI_vFlashWrite>

}
 8001e90:	bf00      	nop
 8001e92:	3788      	adds	r7, #136	; 0x88
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <RedesignHex1Bytes>:



void RedesignHex1Bytes(u8 *CopyStringHex, u8 *OutArray, u8 Copy_u8Size) {
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	71fb      	strb	r3, [r7, #7]
u16 Local_temp0 = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	82bb      	strh	r3, [r7, #20]

u8 Local_index = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]

for (Local_index = 0;Local_index < Copy_u8Size && CopyStringHex[(Local_index * 2)];Local_index++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
 8001eb2:	e077      	b.n	8001fa4 <RedesignHex1Bytes+0x10c>
{
	for (u8 Local_index1 = 0; Local_index1 < 2; Local_index1++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	75bb      	strb	r3, [r7, #22]
 8001eb8:	e04f      	b.n	8001f5a <RedesignHex1Bytes+0xc2>
	{
		if ((CopyStringHex[(Local_index * 2) + Local_index1]) >= '0'
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	005a      	lsls	r2, r3, #1
 8001ebe:	7dbb      	ldrb	r3, [r7, #22]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b2f      	cmp	r3, #47	; 0x2f
 8001ecc:	d91c      	bls.n	8001f08 <RedesignHex1Bytes+0x70>
				&& (CopyStringHex[(Local_index * 2) + Local_index1])<= '9')
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	005a      	lsls	r2, r3, #1
 8001ed2:	7dbb      	ldrb	r3, [r7, #22]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b39      	cmp	r3, #57	; 0x39
 8001ee0:	d812      	bhi.n	8001f08 <RedesignHex1Bytes+0x70>
		{
			(CopyStringHex[(Local_index * 2) + Local_index1]) =
				(CopyStringHex[(Local_index * 2) + Local_index1]) - '0';
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	005a      	lsls	r2, r3, #1
 8001ee6:	7dbb      	ldrb	r3, [r7, #22]
 8001ee8:	4413      	add	r3, r2
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781a      	ldrb	r2, [r3, #0]
			(CopyStringHex[(Local_index * 2) + Local_index1]) =
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	0059      	lsls	r1, r3, #1
 8001ef6:	7dbb      	ldrb	r3, [r7, #22]
 8001ef8:	440b      	add	r3, r1
 8001efa:	4619      	mov	r1, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	440b      	add	r3, r1
				(CopyStringHex[(Local_index * 2) + Local_index1]) - '0';
 8001f00:	3a30      	subs	r2, #48	; 0x30
 8001f02:	b2d2      	uxtb	r2, r2
			(CopyStringHex[(Local_index * 2) + Local_index1]) =
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e025      	b.n	8001f54 <RedesignHex1Bytes+0xbc>
		}
		else if ((CopyStringHex[(Local_index * 2) + Local_index1]) >= 'A'
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	005a      	lsls	r2, r3, #1
 8001f0c:	7dbb      	ldrb	r3, [r7, #22]
 8001f0e:	4413      	add	r3, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b40      	cmp	r3, #64	; 0x40
 8001f1a:	d91b      	bls.n	8001f54 <RedesignHex1Bytes+0xbc>
				&& (CopyStringHex[(Local_index * 2) + Local_index1])<= 'F')
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	005a      	lsls	r2, r3, #1
 8001f20:	7dbb      	ldrb	r3, [r7, #22]
 8001f22:	4413      	add	r3, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b46      	cmp	r3, #70	; 0x46
 8001f2e:	d811      	bhi.n	8001f54 <RedesignHex1Bytes+0xbc>
		{
			(CopyStringHex[(Local_index * 2) + Local_index1]) =
			((CopyStringHex[(Local_index * 2) + Local_index1]) - 'A')+ 10;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	005a      	lsls	r2, r3, #1
 8001f34:	7dbb      	ldrb	r3, [r7, #22]
 8001f36:	4413      	add	r3, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	781a      	ldrb	r2, [r3, #0]
			(CopyStringHex[(Local_index * 2) + Local_index1]) =
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	0059      	lsls	r1, r3, #1
 8001f44:	7dbb      	ldrb	r3, [r7, #22]
 8001f46:	440b      	add	r3, r1
 8001f48:	4619      	mov	r1, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	440b      	add	r3, r1
			((CopyStringHex[(Local_index * 2) + Local_index1]) - 'A')+ 10;
 8001f4e:	3a37      	subs	r2, #55	; 0x37
 8001f50:	b2d2      	uxtb	r2, r2
			(CopyStringHex[(Local_index * 2) + Local_index1]) =
 8001f52:	701a      	strb	r2, [r3, #0]
	for (u8 Local_index1 = 0; Local_index1 < 2; Local_index1++)
 8001f54:	7dbb      	ldrb	r3, [r7, #22]
 8001f56:	3301      	adds	r3, #1
 8001f58:	75bb      	strb	r3, [r7, #22]
 8001f5a:	7dbb      	ldrb	r3, [r7, #22]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d9ac      	bls.n	8001eba <RedesignHex1Bytes+0x22>
		{
			//do nothing
		}
	}

	Local_temp0 = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	82bb      	strh	r3, [r7, #20]

	Local_temp0 = ((CopyStringHex[(Local_index * 2)] & 0x0f) << 4)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	b21a      	sxth	r2, r3
					| (CopyStringHex[(Local_index * 2) + 1] & 0x0f);
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	68f9      	ldr	r1, [r7, #12]
 8001f80:	440b      	add	r3, r1
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b21b      	sxth	r3, r3
	Local_temp0 = ((CopyStringHex[(Local_index * 2)] & 0x0f) << 4)
 8001f90:	82bb      	strh	r3, [r7, #20]


	OutArray[Local_index] = Local_temp0;
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	4413      	add	r3, r2
 8001f98:	8aba      	ldrh	r2, [r7, #20]
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]
for (Local_index = 0;Local_index < Copy_u8Size && CopyStringHex[(Local_index * 2)];Local_index++)
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	75fb      	strb	r3, [r7, #23]
 8001fa4:	7dfa      	ldrb	r2, [r7, #23]
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d211      	bcs.n	8001fd0 <RedesignHex1Bytes+0x138>
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f47f af7b 	bne.w	8001eb4 <RedesignHex1Bytes+0x1c>


}
for (; Local_index < Copy_u8Size; Local_index++) {
 8001fbe:	e007      	b.n	8001fd0 <RedesignHex1Bytes+0x138>
	OutArray[Local_index] = 0;
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
for (; Local_index < Copy_u8Size; Local_index++) {
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	75fb      	strb	r3, [r7, #23]
 8001fd0:	7dfa      	ldrb	r2, [r7, #23]
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d3f3      	bcc.n	8001fc0 <RedesignHex1Bytes+0x128>
}

}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <NVIC_voidInit>:




void		NVIC_voidInit()
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	#ifndef			SCB_AIRCR
		#define		SCB_BASE_ADD		(0xE000ED00)
		#define		SCB_AIRCR			*((u32 *)(SCB_BASE_ADD+0x0C))
	#endif

	SCB_AIRCR = NVIC_NUM_GRP_SUB;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <NVIC_voidInit+0x14>)
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <NVIC_voidInit+0x18>)
 8001ff0:	601a      	str	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed0c 	.word	0xe000ed0c
 8002000:	05fa0500 	.word	0x05fa0500

08002004 <NVIC_voidEnablePerInt>:



void		NVIC_voidEnablePerInt(u8 IntNum)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
	if(IntNum<32)
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	2b1f      	cmp	r3, #31
 8002012:	d805      	bhi.n	8002020 <NVIC_voidEnablePerInt+0x1c>
	{
		NVIC_ISER0=(1<<IntNum); // m3mlna4 OR(|) 3l4an 0 doesnt effect
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	2201      	movs	r2, #1
 8002018:	409a      	lsls	r2, r3
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <NVIC_voidEnablePerInt+0x40>)
 800201c:	601a      	str	r2, [r3, #0]
		IntNum-=32;
		NVIC_ISER1=(1<<IntNum);
	}
	else { /*do nothing*/ }

}
 800201e:	e00a      	b.n	8002036 <NVIC_voidEnablePerInt+0x32>
	else if (IntNum<64)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	2b3f      	cmp	r3, #63	; 0x3f
 8002024:	d807      	bhi.n	8002036 <NVIC_voidEnablePerInt+0x32>
		IntNum-=32;
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	3b20      	subs	r3, #32
 800202a:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1=(1<<IntNum);
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	2201      	movs	r2, #1
 8002030:	409a      	lsls	r2, r3
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <NVIC_voidEnablePerInt+0x44>)
 8002034:	601a      	str	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000e104 	.word	0xe000e104

0800204c <RCC_voidSysClkInt>:
#include "RCC_Private.h"
#include "RCC_Interface.h"


void RCC_voidSysClkInt(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	#if	RCC_Mode == HSI

	// select the main clk os  (HSI)
	CLR_Bit(RCC_Reg->RCC_CFGR,1);
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <RCC_voidSysClkInt+0x44>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <RCC_voidSysClkInt+0x44>)
 8002056:	f023 0302 	bic.w	r3, r3, #2
 800205a:	6093      	str	r3, [r2, #8]
	CLR_Bit(RCC_Reg->RCC_CFGR,0);
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <RCC_voidSysClkInt+0x44>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <RCC_voidSysClkInt+0x44>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	6093      	str	r3, [r2, #8]

	// enable HSI
	SET_Bit(RCC_Reg->RCC_CR,0);
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <RCC_voidSysClkInt+0x44>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a08      	ldr	r2, [pc, #32]	; (8002090 <RCC_voidSysClkInt+0x44>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6013      	str	r3, [r2, #0]
	// wait until stabled
	while(GET_Bit(RCC_Reg->RCC_CR,1)==0);
 8002074:	bf00      	nop
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <RCC_voidSysClkInt+0x44>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f9      	beq.n	8002076 <RCC_voidSysClkInt+0x2a>
	while(GET_Bit(RCC_Reg->RCC_CR,25)==0);

#endif


}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800

08002094 <RCC_voidEnablePerCLK>:

void RCC_voidEnablePerCLK(u32 Per_ID,u8 Bus_ID)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
	if(Per_ID<32)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b1f      	cmp	r3, #31
 80020a4:	d857      	bhi.n	8002156 <RCC_voidEnablePerCLK+0xc2>
	{
		//control the division factor of the APB high-speed clock
		RCC_Reg->RCC_CFGR|=APBH_speed<<13;
 80020a6:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4a2e      	ldr	r2, [pc, #184]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 80020ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b0:	6093      	str	r3, [r2, #8]
		//control the division factor of the APB2 high-speed clock
		RCC_Reg->RCC_CFGR|=APBL_speed<<10;
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 80020b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020bc:	6093      	str	r3, [r2, #8]
		//control the division factor of the APB2 high-speed clock
		RCC_Reg->RCC_CFGR|=AHB_speed<<4;
 80020be:	4b29      	ldr	r3, [pc, #164]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 80020c0:	4a28      	ldr	r2, [pc, #160]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	6093      	str	r3, [r2, #8]
		switch(Bus_ID)
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d845      	bhi.n	8002158 <RCC_voidEnablePerCLK+0xc4>
 80020cc:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <RCC_voidEnablePerCLK+0x40>)
 80020ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d2:	bf00      	nop
 80020d4:	080020e9 	.word	0x080020e9
 80020d8:	080020ff 	.word	0x080020ff
 80020dc:	08002115 	.word	0x08002115
 80020e0:	0800212b 	.word	0x0800212b
 80020e4:	08002141 	.word	0x08002141
		{
		case AHB1:SET_Bit(RCC_Reg->RCC_AHB1ENR,Per_ID)	;	break;
 80020e8:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	2101      	movs	r1, #1
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	4611      	mov	r1, r2
 80020f6:	4a1b      	ldr	r2, [pc, #108]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 80020f8:	430b      	orrs	r3, r1
 80020fa:	6313      	str	r3, [r2, #48]	; 0x30
 80020fc:	e02c      	b.n	8002158 <RCC_voidEnablePerCLK+0xc4>
		case AHB2:SET_Bit(RCC_Reg->RCC_AHB2ENR,Per_ID)	;	break;
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 8002100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002102:	2101      	movs	r1, #1
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	4611      	mov	r1, r2
 800210c:	4a15      	ldr	r2, [pc, #84]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 800210e:	430b      	orrs	r3, r1
 8002110:	6353      	str	r3, [r2, #52]	; 0x34
 8002112:	e021      	b.n	8002158 <RCC_voidEnablePerCLK+0xc4>
		case AHB3:SET_Bit(RCC_Reg->RCC_AHB3ENR,Per_ID)	;	break;
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	2101      	movs	r1, #1
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	fa01 f202 	lsl.w	r2, r1, r2
 8002120:	4611      	mov	r1, r2
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 8002124:	430b      	orrs	r3, r1
 8002126:	6393      	str	r3, [r2, #56]	; 0x38
 8002128:	e016      	b.n	8002158 <RCC_voidEnablePerCLK+0xc4>
		case APB1:SET_Bit(RCC_Reg->RCC_APB1ENR,Per_ID)	;	break;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2101      	movs	r1, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	fa01 f202 	lsl.w	r2, r1, r2
 8002136:	4611      	mov	r1, r2
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 800213a:	430b      	orrs	r3, r1
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	e00b      	b.n	8002158 <RCC_voidEnablePerCLK+0xc4>
		case APB2:SET_Bit(RCC_Reg->RCC_APB2ENR,Per_ID)	;	break;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	2101      	movs	r1, #1
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	fa01 f202 	lsl.w	r2, r1, r2
 800214c:	4611      	mov	r1, r2
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <RCC_voidEnablePerCLK+0xd0>)
 8002150:	430b      	orrs	r3, r1
 8002152:	6453      	str	r3, [r2, #68]	; 0x44
 8002154:	e000      	b.n	8002158 <RCC_voidEnablePerCLK+0xc4>
		}
	}
 8002156:	bf00      	nop
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40023800 	.word	0x40023800

08002168 <RCC_voidDisablePerCLK>:

void RCC_voidDisablePerCLK(u32 Per_ID,u8 Bus_ID)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
	if(Per_ID<32)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b1f      	cmp	r3, #31
 8002178:	d84c      	bhi.n	8002214 <RCC_voidDisablePerCLK+0xac>
		{
				switch(Bus_ID)
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d84a      	bhi.n	8002216 <RCC_voidDisablePerCLK+0xae>
 8002180:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <RCC_voidDisablePerCLK+0x20>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	0800219d 	.word	0x0800219d
 800218c:	080021b5 	.word	0x080021b5
 8002190:	080021cd 	.word	0x080021cd
 8002194:	080021e5 	.word	0x080021e5
 8002198:	080021fd 	.word	0x080021fd
				{
				case AHB1:CLR_Bit(RCC_Reg->RCC_AHB1ENR,Per_ID)	;	break;
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <RCC_voidDisablePerCLK+0xbc>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	2101      	movs	r1, #1
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	43d2      	mvns	r2, r2
 80021aa:	4611      	mov	r1, r2
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <RCC_voidDisablePerCLK+0xbc>)
 80021ae:	400b      	ands	r3, r1
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	e030      	b.n	8002216 <RCC_voidDisablePerCLK+0xae>
				case AHB2:CLR_Bit(RCC_Reg->RCC_AHB2ENR,Per_ID)	;	break;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <RCC_voidDisablePerCLK+0xbc>)
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	2101      	movs	r1, #1
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	43d2      	mvns	r2, r2
 80021c2:	4611      	mov	r1, r2
 80021c4:	4a17      	ldr	r2, [pc, #92]	; (8002224 <RCC_voidDisablePerCLK+0xbc>)
 80021c6:	400b      	ands	r3, r1
 80021c8:	6353      	str	r3, [r2, #52]	; 0x34
 80021ca:	e024      	b.n	8002216 <RCC_voidDisablePerCLK+0xae>
				case AHB3:CLR_Bit(RCC_Reg->RCC_AHB3ENR,Per_ID)	;	break;
 80021cc:	4b15      	ldr	r3, [pc, #84]	; (8002224 <RCC_voidDisablePerCLK+0xbc>)
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	2101      	movs	r1, #1
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	43d2      	mvns	r2, r2
 80021da:	4611      	mov	r1, r2
 80021dc:	4a11      	ldr	r2, [pc, #68]	; (8002224 <RCC_voidDisablePerCLK+0xbc>)
 80021de:	400b      	ands	r3, r1
 80021e0:	6393      	str	r3, [r2, #56]	; 0x38
 80021e2:	e018      	b.n	8002216 <RCC_voidDisablePerCLK+0xae>
				case APB1:CLR_Bit(RCC_Reg->RCC_APB1ENR,Per_ID)	;	break;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <RCC_voidDisablePerCLK+0xbc>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	2101      	movs	r1, #1
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	fa01 f202 	lsl.w	r2, r1, r2
 80021f0:	43d2      	mvns	r2, r2
 80021f2:	4611      	mov	r1, r2
 80021f4:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <RCC_voidDisablePerCLK+0xbc>)
 80021f6:	400b      	ands	r3, r1
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	e00c      	b.n	8002216 <RCC_voidDisablePerCLK+0xae>
				case APB2:CLR_Bit(RCC_Reg->RCC_APB2ENR,Per_ID)	;	break;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <RCC_voidDisablePerCLK+0xbc>)
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	2101      	movs	r1, #1
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	43d2      	mvns	r2, r2
 800220a:	4611      	mov	r1, r2
 800220c:	4a05      	ldr	r2, [pc, #20]	; (8002224 <RCC_voidDisablePerCLK+0xbc>)
 800220e:	400b      	ands	r3, r1
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	e000      	b.n	8002216 <RCC_voidDisablePerCLK+0xae>
				}
		}
 8002214:	bf00      	nop

}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800

08002228 <STK_voidInit>:

static	void	(*STK_CallBack)	(void)	=	NULL;
static	u8		STK_u8ModeOfInterval;

void	STK_voidInit()
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
		/*		RCC == HSI		*/
		#if		STK_CLK_SRC	==	STK_AHB_DIV_8
		STK	->CTRL = 0x00000000;
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <STK_voidInit+0x14>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
		#elif	STK_CLK_SRC	==	STK_AHB
			STk -> CTRL = 0x00000004;
		#elif	#error	"Wrong choice of SysTick Clock Source!"
		#endif
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e010 	.word	0xe000e010

08002240 <STK_voidSetIntervalPeriodic>:
	SET_Bit(STK -> CTRL , 1);
	/*	Set the mode single Intervale	*/
	STK_u8ModeOfInterval = STK_SINGLE_INTERVAL;
}
void	STK_voidSetIntervalPeriodic(u32	Ticks, void (*Pf)(void))
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
		/*	Load ticks to Load Register 	*/
	STK -> LOAD = Ticks;
 800224a:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <STK_voidSetIntervalPeriodic+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6053      	str	r3, [r2, #4]
	/*	Start the timer 				*/
	SET_Bit(STK -> CTRL , 0);
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <STK_voidSetIntervalPeriodic+0x40>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <STK_voidSetIntervalPeriodic+0x40>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6013      	str	r3, [r2, #0]
	/*	Save Call Back Function		 	*/
	STK_CallBack =	Pf;
 800225c:	4a09      	ldr	r2, [pc, #36]	; (8002284 <STK_voidSetIntervalPeriodic+0x44>)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6013      	str	r3, [r2, #0]
	/*	Enable STK Interrupt		 	*/
	SET_Bit(STK -> CTRL , 1);
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <STK_voidSetIntervalPeriodic+0x40>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a06      	ldr	r2, [pc, #24]	; (8002280 <STK_voidSetIntervalPeriodic+0x40>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	6013      	str	r3, [r2, #0]
	/*	Set the mode single Intervale	*/
	STK_u8ModeOfInterval = STK_PERIOD_INTERVAL;
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <STK_voidSetIntervalPeriodic+0x48>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e010 	.word	0xe000e010
 8002284:	20000098 	.word	0x20000098
 8002288:	2000009c 	.word	0x2000009c

0800228c <STK_voidStopInterval>:
void	STK_voidStopInterval()
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
		/*	Disable The Interrupt			*/
		CLR_Bit(STK -> CTRL , 1);
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <STK_voidStopInterval+0x34>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <STK_voidStopInterval+0x34>)
 8002296:	f023 0302 	bic.w	r3, r3, #2
 800229a:	6013      	str	r3, [r2, #0]
		/*	Stop the timer					*/
		CLR_Bit(STK -> CTRL , 0);
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <STK_voidStopInterval+0x34>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <STK_voidStopInterval+0x34>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6013      	str	r3, [r2, #0]
		STK ->	LOAD	=	0;
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <STK_voidStopInterval+0x34>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	605a      	str	r2, [r3, #4]
		STK ->	VAL		=	0;	
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <STK_voidStopInterval+0x34>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <SysTick_Handler>:
	return	Local_u32Remaining;
}


void	SysTick_Handler()
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
	u8 Local_u8Temp=0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	71fb      	strb	r3, [r7, #7]
	if(STK_u8ModeOfInterval == STK_SINGLE_INTERVAL)
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <SysTick_Handler+0x54>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d111      	bne.n	80022fa <SysTick_Handler+0x36>
	{	
		/*	Disable The Interrupt			*/
		CLR_Bit(STK -> CTRL , 1);
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <SysTick_Handler+0x58>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a10      	ldr	r2, [pc, #64]	; (800231c <SysTick_Handler+0x58>)
 80022dc:	f023 0302 	bic.w	r3, r3, #2
 80022e0:	6013      	str	r3, [r2, #0]
		/*	Stop the timer					*/
		CLR_Bit(STK -> CTRL , 0);
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <SysTick_Handler+0x58>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a0d      	ldr	r2, [pc, #52]	; (800231c <SysTick_Handler+0x58>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6013      	str	r3, [r2, #0]
		STK ->	LOAD	=	0;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <SysTick_Handler+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
		STK ->	VAL		=	0;
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <SysTick_Handler+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
	}
	STK_CallBack();
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <SysTick_Handler+0x5c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4798      	blx	r3
	/*	to clear the timer flag just read it */
	Local_u8Temp	=	GET_Bit(STK -> CTRL,16);
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <SysTick_Handler+0x58>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	71fb      	strb	r3, [r7, #7]
	//GET_Bit(STK -> CTRL,16);
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000009c 	.word	0x2000009c
 800231c:	e000e010 	.word	0xe000e010
 8002320:	20000098 	.word	0x20000098

08002324 <UART3_voidInit>:
 void (*UART1_CallBack[UART_CALLBACK_SIZE])(void) =
 {	NULLPTR, NULLPTR,NULLPTR,NULLPTR };
 */

void UART3_voidInit()
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

	/*********UART enable ********/
		SET_Bit(UART3_Reg->USART_CR1, UE);
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <UART3_voidInit+0x68>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a17      	ldr	r2, [pc, #92]	; (800238c <UART3_voidInit+0x68>)
 800232e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002332:	60d3      	str	r3, [r2, #12]
	/******** baud rate **********/
	UART3_Reg->USART_BRR =(4<<4)|(5);// (13<<4);//(52<<4)|(1<<0);//0xD0; //(13<<4); //0x45; //0x341;//(52<<4)|(1<<0);//BAUDRATE;
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <UART3_voidInit+0x68>)
 8002336:	2245      	movs	r2, #69	; 0x45
 8002338:	609a      	str	r2, [r3, #8]

	/******** frame format *******/
//no parity
	CLR_Bit(UART3_Reg->USART_CR1, PCE);
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <UART3_voidInit+0x68>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <UART3_voidInit+0x68>)
 8002340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002344:	60d3      	str	r3, [r2, #12]
// 1 start 8bit data n stop
	CLR_Bit(UART3_Reg->USART_CR1, M);
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <UART3_voidInit+0x68>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <UART3_voidInit+0x68>)
 800234c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002350:	60d3      	str	r3, [r2, #12]
// 1 stop bit
	CLR_Bit(UART3_Reg->USART_CR2, StOP_0);
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <UART3_voidInit+0x68>)
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	4a0d      	ldr	r2, [pc, #52]	; (800238c <UART3_voidInit+0x68>)
 8002358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800235c:	6113      	str	r3, [r2, #16]
	CLR_Bit(UART3_Reg->USART_CR2, StOP_1);
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <UART3_voidInit+0x68>)
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <UART3_voidInit+0x68>)
 8002364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002368:	6113      	str	r3, [r2, #16]

	/******** enable RX **********/
	SET_Bit(UART3_Reg->USART_CR1, RE);
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <UART3_voidInit+0x68>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <UART3_voidInit+0x68>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	60d3      	str	r3, [r2, #12]
	/******** enable TX **********/
	SET_Bit(UART3_Reg->USART_CR1, TE);
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <UART3_voidInit+0x68>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a04      	ldr	r2, [pc, #16]	; (800238c <UART3_voidInit+0x68>)
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	60d3      	str	r3, [r2, #12]

	// clr status reg
	//UART3_Reg->USART_SR = 0;
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40004800 	.word	0x40004800

08002390 <UART3_u8SendByteBusyw8>:

Error_t UART3_u8SendByteBusyw8(u8 data) {
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
	Error_t local_u8Status = OK;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
	while (!GET_Bit(UART3_Reg->USART_SR, TXE))
 800239e:	bf00      	nop
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <UART3_u8SendByteBusyw8+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	09db      	lsrs	r3, r3, #7
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f8      	beq.n	80023a0 <UART3_u8SendByteBusyw8+0x10>
		; // txe ---- time out is needed
	UART3_Reg->USART_DR = data;
 80023ae:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <UART3_u8SendByteBusyw8+0x40>)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	6053      	str	r3, [r2, #4]
	CLR_Bit(UART3_Reg->USART_SR, TXE);
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <UART3_u8SendByteBusyw8+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <UART3_u8SendByteBusyw8+0x40>)
 80023ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023be:	6013      	str	r3, [r2, #0]
	return local_u8Status;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40004800 	.word	0x40004800

080023d4 <UART3_u8SendStringBusyW8>:
	*data = UART3_Reg->USART_DR;
	CLR_Bit(UART3_Reg->USART_SR, RXNE);
	return local_u8Status;
}

Error_t UART3_u8SendStringBusyW8(char *data) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	73bb      	strb	r3, [r7, #14]

	for (u8 local_index = 0; data[local_index]; local_index++) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	e009      	b.n	80023fa <UART3_u8SendStringBusyW8+0x26>
		UART3_u8SendByteBusyw8(data[local_index]);
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ffce 	bl	8002390 <UART3_u8SendByteBusyw8>
	for (u8 local_index = 0; data[local_index]; local_index++) {
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	3301      	adds	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ef      	bne.n	80023e6 <UART3_u8SendStringBusyW8+0x12>
	}
	return local_u8Status;
 8002406:	7bbb      	ldrb	r3, [r7, #14]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <UART3_u8RecieveByte>:

	return local_u8Status;

}

Error_t UART3_u8RecieveByte(volatile u8 *data) {
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
// return DR reg
	*data = UART3_Reg->USART_DR;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <UART3_u8RecieveByte+0x30>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	701a      	strb	r2, [r3, #0]
	CLR_Bit(UART3_Reg->USART_SR, RXNE); //
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <UART3_u8RecieveByte+0x30>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <UART3_u8RecieveByte+0x30>)
 800242c:	f023 0320 	bic.w	r3, r3, #32
 8002430:	6013      	str	r3, [r2, #0]
	return local_u8Status;
 8002432:	7bfb      	ldrb	r3, [r7, #15]

}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40004800 	.word	0x40004800

08002444 <UART3_u8EnterruptEnRX>:
	UART3_DataReady = 0;
}

Error_t UART3_u8RecieveStringBusyW8(u8 *data);

Error_t UART3_u8EnterruptEnRX(void) {
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
	Error_t local_u8Status = OK;
 800244a:	2300      	movs	r3, #0
 800244c:	71fb      	strb	r3, [r7, #7]
	SET_Bit(UART3_Reg->USART_CR1, RXNEIE);
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <UART3_u8EnterruptEnRX+0x24>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <UART3_u8EnterruptEnRX+0x24>)
 8002454:	f043 0320 	orr.w	r3, r3, #32
 8002458:	60d3      	str	r3, [r2, #12]
	return local_u8Status;
 800245a:	79fb      	ldrb	r3, [r7, #7]
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40004800 	.word	0x40004800

0800246c <UART3_u8EnterruptDsRX>:
Error_t UART3_u8EnterruptDsRX(void) {
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
	Error_t local_u8Status = OK;
 8002472:	2300      	movs	r3, #0
 8002474:	71fb      	strb	r3, [r7, #7]
	CLR_Bit(UART3_Reg->USART_CR1, RXNEIE);
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <UART3_u8EnterruptDsRX+0x24>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a05      	ldr	r2, [pc, #20]	; (8002490 <UART3_u8EnterruptDsRX+0x24>)
 800247c:	f023 0320 	bic.w	r3, r3, #32
 8002480:	60d3      	str	r3, [r2, #12]
	return local_u8Status;
 8002482:	79fb      	ldrb	r3, [r7, #7]
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40004800 	.word	0x40004800

08002494 <UART3_u8EnterruptCallBackRX>:
Error_t UART3_u8EnterruptCallBackRX(void (*Rx)(void)) {
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
	if (Rx != NULL) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <UART3_u8EnterruptCallBackRX+0x1a>
		GlobalRX = Rx;
 80024a6:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <UART3_u8EnterruptCallBackRX+0x2c>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	e001      	b.n	80024b2 <UART3_u8EnterruptCallBackRX+0x1e>
	} else {
		local_u8Status = NULL_PTR;
 80024ae:	2303      	movs	r3, #3
 80024b0:	73fb      	strb	r3, [r7, #15]
	}
	return local_u8Status;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	200000a0 	.word	0x200000a0

080024c4 <USART3_IRQHandler>:
	Error_t local_u8Status = OK;

	return local_u8Status;
}

void USART3_IRQHandler(void) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	 } else {
	 // do nothing
	 }
	 }
	 */
	if (GET_Bit(UART3_Reg->USART_SR, RXNE)) {
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <USART3_IRQHandler+0x30>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <USART3_IRQHandler+0x2c>
		if (GlobalRX) {
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <USART3_IRQHandler+0x34>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <USART3_IRQHandler+0x20>
			GlobalRX();
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <USART3_IRQHandler+0x34>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4798      	blx	r3

		}
		CLR_Bit(UART3_Reg->USART_SR, RXNE);
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <USART3_IRQHandler+0x30>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a02      	ldr	r2, [pc, #8]	; (80024f4 <USART3_IRQHandler+0x30>)
 80024ea:	f023 0320 	bic.w	r3, r3, #32
 80024ee:	6013      	str	r3, [r2, #0]

	}

}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40004800 	.word	0x40004800
 80024f8:	200000a0 	.word	0x200000a0

080024fc <USART2_IRQHandler>:
	Error_t local_u8Status = OK;

	return local_u8Status;
}

void USART2_IRQHandler(void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	 } else {
	 // do nothing
	 }
	 }
	 */
	if (GET_Bit(UART2_Reg->USART_SR, RXNE)) {
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <USART2_IRQHandler+0x30>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00c      	beq.n	8002528 <USART2_IRQHandler+0x2c>
		if (GlobalRX2)
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <USART2_IRQHandler+0x34>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <USART2_IRQHandler+0x20>
		{
			GlobalRX2();
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <USART2_IRQHandler+0x34>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4798      	blx	r3

		}
		CLR_Bit(UART2_Reg->USART_SR, RXNE);
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <USART2_IRQHandler+0x30>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a02      	ldr	r2, [pc, #8]	; (800252c <USART2_IRQHandler+0x30>)
 8002522:	f023 0320 	bic.w	r3, r3, #32
 8002526:	6013      	str	r3, [r2, #0]

	}

}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40004400 	.word	0x40004400
 8002530:	200000a4 	.word	0x200000a4

08002534 <main>:

	//UART3_u8SendStringBusyW8("OK");*/
}

int main(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	/*Init the RCC Clock*/
	RCC_voidSysClkInt();
 8002538:	f7ff fd88 	bl	800204c <RCC_voidSysClkInt>

	//UART3_u8EnterruptCallBackRX(&RX_Fu);

	Bootloader_Init();
 800253c:	f7fd fe5e 	bl	80001fc <Bootloader_Init>
	//FMI_vFlashWrite(0x08004030,data,6);

	while(1)
	{
		/* led indecate for waiting state */
		DIO_voidSetPinValue(PORTD, pin13, High);
 8002540:	2201      	movs	r2, #1
 8002542:	210d      	movs	r1, #13
 8002544:	2003      	movs	r0, #3
 8002546:	f7ff f9df 	bl	8001908 <DIO_voidSetPinValue>
		_delay_ms(100);
 800254a:	2064      	movs	r0, #100	; 0x64
 800254c:	f7fe f89c 	bl	8000688 <_delay_ms>
		DIO_voidSetPinValue(PORTD, pin13, Low);
 8002550:	2200      	movs	r2, #0
 8002552:	210d      	movs	r1, #13
 8002554:	2003      	movs	r0, #3
 8002556:	f7ff f9d7 	bl	8001908 <DIO_voidSetPinValue>
		_delay_ms(100);
 800255a:	2064      	movs	r0, #100	; 0x64
 800255c:	f7fe f894 	bl	8000688 <_delay_ms>
		/* state machine for boot loader */
		Bootloader_voidFlashRunnable();
 8002560:	f7fd fec0 	bl	80002e4 <Bootloader_voidFlashRunnable>
		DIO_voidSetPinValue(PORTD, pin13, High);
 8002564:	e7ec      	b.n	8002540 <main+0xc>
	...

08002568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800256a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800256c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002572:	490d      	ldr	r1, [pc, #52]	; (80025a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <LoopForever+0xe>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002578:	e002      	b.n	8002580 <LoopCopyDataInit>

0800257a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800257c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257e:	3304      	adds	r3, #4

08002580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002584:	d3f9      	bcc.n	800257a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002588:	4c0a      	ldr	r4, [pc, #40]	; (80025b4 <LoopForever+0x16>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800258c:	e001      	b.n	8002592 <LoopFillZerobss>

0800258e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002590:	3204      	adds	r2, #4

08002592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002594:	d3fb      	bcc.n	800258e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002596:	f000 f811 	bl	80025bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800259a:	f7ff ffcb 	bl	8002534 <main>

0800259e <LoopForever>:

LoopForever:
  b LoopForever
 800259e:	e7fe      	b.n	800259e <LoopForever>
  ldr   r0, =_estack
 80025a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80025ac:	08002654 	.word	0x08002654
  ldr r2, =_sbss
 80025b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80025b4:	200000a8 	.word	0x200000a8

080025b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC_IRQHandler>
	...

080025bc <__libc_init_array>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	4d0d      	ldr	r5, [pc, #52]	; (80025f4 <__libc_init_array+0x38>)
 80025c0:	4c0d      	ldr	r4, [pc, #52]	; (80025f8 <__libc_init_array+0x3c>)
 80025c2:	1b64      	subs	r4, r4, r5
 80025c4:	10a4      	asrs	r4, r4, #2
 80025c6:	2600      	movs	r6, #0
 80025c8:	42a6      	cmp	r6, r4
 80025ca:	d109      	bne.n	80025e0 <__libc_init_array+0x24>
 80025cc:	4d0b      	ldr	r5, [pc, #44]	; (80025fc <__libc_init_array+0x40>)
 80025ce:	4c0c      	ldr	r4, [pc, #48]	; (8002600 <__libc_init_array+0x44>)
 80025d0:	f000 f820 	bl	8002614 <_init>
 80025d4:	1b64      	subs	r4, r4, r5
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	2600      	movs	r6, #0
 80025da:	42a6      	cmp	r6, r4
 80025dc:	d105      	bne.n	80025ea <__libc_init_array+0x2e>
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e4:	4798      	blx	r3
 80025e6:	3601      	adds	r6, #1
 80025e8:	e7ee      	b.n	80025c8 <__libc_init_array+0xc>
 80025ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ee:	4798      	blx	r3
 80025f0:	3601      	adds	r6, #1
 80025f2:	e7f2      	b.n	80025da <__libc_init_array+0x1e>
 80025f4:	0800264c 	.word	0x0800264c
 80025f8:	0800264c 	.word	0x0800264c
 80025fc:	0800264c 	.word	0x0800264c
 8002600:	08002650 	.word	0x08002650

08002604 <memset>:
 8002604:	4402      	add	r2, r0
 8002606:	4603      	mov	r3, r0
 8002608:	4293      	cmp	r3, r2
 800260a:	d100      	bne.n	800260e <memset+0xa>
 800260c:	4770      	bx	lr
 800260e:	f803 1b01 	strb.w	r1, [r3], #1
 8002612:	e7f9      	b.n	8002608 <memset+0x4>

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr
